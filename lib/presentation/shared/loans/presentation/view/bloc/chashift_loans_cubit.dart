import 'package:injectable/injectable.dart';import 'package:shiftapp/core/bloc/base_cubit.dart';import 'package:shiftapp/presentation/shared/loans/data/models/index_loan.dart';import '../../../../../presentationUser/common/common_state.dart';import '../../../data/repositories/chashift_loans_repository.dart';@Injectable()class ChashiftLoansCubit extends BaseCubit {  final ChashiftLonsRepository repository;  ChashiftLoansCubit(this.repository);  StreamState<List<LoanData>?> loansStream = StreamStateInitial();  List<LoanData> listLoans = [];  Future<void> fetchTabAndTotalLoans({required bool isAdmin}) async {    executeBuilder(() => repository.fetchTabsAndTotalLoans(isAdmin), onSuccess: (value) async {      final data = TabsAndTotalLoans.fromDto(value);      fetchLoansStream(status: data.tabLoans?.first.value ?? 0, isAdmin: isAdmin);      emit(InitializedLoansTabsData(dataTab: data, loanData: listLoans));    });  }  Future<void> fetchLoans({required int status, required bool isAdmin}) async {    executeBuilder(() => repository.fetchLoans(status: status, isAdmin: isAdmin), onSuccess: (value) {      listLoans = value.map((e) => LoanData.fromDto(e)).toList();    });  }  fetchLoansStream({required int status, required bool isAdmin}) async {    loansStream.setData(null);    try {      final result = await repository.fetchLoans(isAdmin: isAdmin, status: status);      listLoans = result.map((e) => LoanData.fromDto(e)).toList();      loansStream.setData(listLoans);    } on Exception catch (e) {      loansStream.setError(e);    }  }  void searchByText(String value) {    try {      List<LoanData> usersSearched = listLoans;      if (value.isNotEmpty) {        usersSearched = listLoans            .where((user) =>                (user.freelanceName != null && user.freelanceName!.toString().contains(value)) ||                (user.mobile != null && user.mobile!.contains(value)) ||                (user.idNumber != null && user.idNumber!.contains(value)))            .toList();      }      loansStream.setData(usersSearched);    } on Exception catch (e) {      print(e);      loansStream.setError(e);    }  }}