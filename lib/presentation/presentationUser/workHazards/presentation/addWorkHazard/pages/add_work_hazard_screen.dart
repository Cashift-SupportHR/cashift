import 'dart:io';import 'package:flutter/material.dart';import 'package:shiftapp/presentation/presentationUser/resources/colors.dart';import 'package:shiftapp/presentation/presentationUser/salarydefinitionrequest/requests/widgets/warning_widget.dart';import '../../../../../adminFeatures/focusPoints/domain/entities/shifts_by_project.dart';import '../../../../../adminFeatures/focusPoints/presentations/add_focus_point/pages/focus_point_data/widgets/projects_picker.dart';import '../../../../../adminFeatures/usersManagement/presentation/addNewUser/widgets/company_picker.dart';import '../../../../../shared/components/index.dart';import '../../../../../shared/components/picker/projects_picker_stream.dart';import '../../../../../shared/components/text_field/build_text_field_item.dart';import '../../../../../shared/components/texts/terms_conditions_widget.dart';import '../../../../../shared/models/common_list_item.dart';import '../../../../common/common_state.dart';import '../../../../resources/constants.dart';import '../../../data/models/add_work_hazard_params.dart';import '../../../domain/entities/work_hazard.dart';import '../bloc/add_work_hazard_state.dart';import '../widgets/upload_files_list.dart';class AddWorkHazardScreen extends BaseStatelessWidget {  final AddWorkHazardState state;  final Function(int id) onFetchProjectsByCompanyId;  final Function(int id) onFetchShiftsByProjectId;  final Function(int id) onFetchInstructionsByTypeId;  final Function(AddWorkHazardParams, List<File>) onAddWorkHazard;  AddWorkHazardScreen(      {Key? key,      required this.state,      required this.onFetchProjectsByCompanyId,      required this.onFetchShiftsByProjectId,      required this.onFetchInstructionsByTypeId,      required this.onAddWorkHazard})      : super(key: key);  final _formKey = GlobalKey<FormState>();  int companyId = 0;  int projectId = 0;  int shiftId = 0;  TextEditingController projectController = TextEditingController();  TextEditingController shiftController = TextEditingController();  TextEditingController hazardTypeController = TextEditingController();  TextEditingController hazardPriorityLevelController = TextEditingController();  TextEditingController detailsController = TextEditingController();  int? hazardTypeId;  int? hazardPriorityLevelId;  StreamStateInitial<bool> isAcceptStream = StreamStateInitial<bool>();  List<File> files = [];  @override  Widget build(BuildContext context) {    _initData();    return Form(      key: _formKey,      child: SingleChildScrollView(        padding: const EdgeInsets.all(16),        child: Column(          crossAxisAlignment: CrossAxisAlignment.start,          mainAxisAlignment: MainAxisAlignment.start,          children: [            companiesPicker(),            projectsPickerStream(),            shiftsPickerStream(),            complaintType(context),            degreeImportance(context),            descriptionTextField(context),            UploadFilesList(              initialValueList: [],              onPicker: (filesValue) {                files = filesValue;              },            ),            warningWidget(),            streamTermsConditionsWidget(context),            checkBoxWidget(),            rowButtons(),          ],        ),      ),    );  }  CompanyPicker companiesPicker() {    return CompanyPicker(      items: state.companies ?? [],      initialValue: '',      onSelectItem: (item) {        companyId = item.index;        projectController.clear();        shiftController.clear();        projectId = 0;        shiftId = 0;        onFetchProjectsByCompanyId(companyId);      },    );  }  ProjectsPickerStream projectsPickerStream() {    return ProjectsPickerStream(      projectsStream: state.projectsStream,      projectController: projectController,      onSelectItem: (id) {        projectId = id;        shiftController.clear();        shiftId = 0;        onFetchShiftsByProjectId(projectId);      },    );  }  StreamDataStateWidget<List<ShiftsByProject>?> shiftsPickerStream() {    return StreamDataStateWidget<List<ShiftsByProject>?>(        stream: state.shiftsStream,        builder: (context, data) {          return BuildTextFieldItem(            title: strings.working_period,            hintText: strings.select_working_period,            suffixIcon: Icons.keyboard_arrow_down,            controller: shiftController,            onTap: () {              ListPickerWidget.showPicker(                  context: context,                  title: strings.select_working_period,                  setSearch: true,                  searchHint: strings.search,                  items: ShiftsByProject.toItemsListPicker(data ?? []),                  onSelectItem: (item) async {                    shiftController.text = item.value;                    shiftId = item.index;                  });            },          );        });  }  BuildTextFieldItem complaintType(BuildContext context) {    return BuildTextFieldItem(      title: strings.type,      hintText: strings.select_type,      suffixIcon: Icons.keyboard_arrow_down,      controller: hazardTypeController,      onTap: () {        ListPickerWidget.showPicker(          context: context,          setSearch: true,          title: strings.select_type,          items: CommonListItem.toItemsListPicker(state.workHazardsTypes),          onSelectItem: (value) {            hazardTypeController.text = value.value;            hazardTypeId = value.index;            onFetchInstructionsByTypeId(hazardTypeId!);          },        );      },    );  }  BuildTextFieldItem degreeImportance(BuildContext context) {    return BuildTextFieldItem(      title: strings.degree_importance,      hintText: strings.select_degree_importance,      suffixIcon: Icons.keyboard_arrow_down,      controller: hazardPriorityLevelController,      onTap: () {        ListPickerWidget.showPicker(          context: context,          setSearch: true,          title: strings.select_degree_importance,          items: CommonListItem.toItemsListPicker(state.hazardPriorityLevels),          onSelectItem: (value) {            hazardPriorityLevelController.text = value.value;            hazardPriorityLevelId = value.index;          },        );      },    );  }  BuildTextFieldItem descriptionTextField(BuildContext context) {    return BuildTextFieldItem(      title: strings.details,      hintText: strings.write_your_notes_here,      controller: detailsController,      keyboardType: TextInputType.multiline,      minLines: 5,    );  }  TermsConditionsWidget streamTermsConditionsWidget(BuildContext context) {    return TermsConditionsWidget(      dataStream: state.hazardTypeInstructionsStream,    );  }  rowButtons() {    return StreamBuilder<bool>(      initialData: false,      stream: isAcceptStream.stream,      builder: (context, snapshot) {        return RowButtons(          onSave: snapshot.data != true              ? null              : () {                  if (_formKey.currentState!.validate()) {                    onAddComplaintPressed();                  }                },          margin: const EdgeInsets.only(top: 16),          onCancel: () {            Navigator.pop(context);          },        );      },    );  }  WarningCheckBoxWidget checkBoxWidget() {    return WarningCheckBoxWidget(      backgroundColor: kRed.withOpacity(0.04),      textStyle: kTextMedium.copyWith(fontSize: 14, color: kPrimary),      text: strings.terms_and_conditions_message,      margin: const EdgeInsetsDirectional.only(top: 10, bottom: 20),      onChanged: (value) {        isAcceptStream.setData(value ?? false);      },    );  }  onAddComplaintPressed() {    onAddWorkHazard(      AddWorkHazardParams(        id: state.workHazardData?.id ?? 0,        hazardTypeId: hazardTypeId,        hazardPriorityLevelId: hazardPriorityLevelId,        hazardSatusId: 1,        companyId: companyId,        projectId: projectId,        shiftId: shiftId,        description: detailsController.text,      ),      files,    );  }  _initData() {    if (state.workHazardData != null) {      WorkHazard workHazardData = state.workHazardData!;      hazardTypeId = workHazardData.hazardTypeId;      hazardPriorityLevelId = workHazardData.hazardPriorityLevelId;      hazardTypeController.text = workHazardData.hazardTypeName ?? '';      hazardPriorityLevelController.text =          workHazardData.hazardPriorityLevelName ?? '';    }  }  warningWidget() {    return WarningWidget(      warningText: strings.add_complaint_files_desc,      margin: const EdgeInsetsDirectional.only(end: 10, top: 16, bottom: 16),      color: kPrimary,    );  }}