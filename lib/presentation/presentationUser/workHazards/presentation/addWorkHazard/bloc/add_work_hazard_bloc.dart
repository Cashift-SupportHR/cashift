import 'dart:io';import 'package:injectable/injectable.dart';import 'package:shiftapp/core/bloc/base_cubit.dart';import 'package:shiftapp/presentation/presentationUser/common/common_state.dart';import '../../../../../adminFeatures/focusPoints/data/models/index.dart';import '../../../../../adminFeatures/focusPoints/domain/entities/shifts_by_project.dart';import '../../../../../adminFeatures/projectsManagement/data/models/index.dart';import '../../../../../adminFeatures/usersManagement/data/models/index.dart';import '../../../../../shared/models/common_list_item.dart';import '../../../../common/stream_data_state.dart';import '../../../data/models/index.dart';import '../../../data/models/upload_work_hazard_files_params.dart';import 'add_work_hazard_state.dart';@Injectable()class AddWorkHazardCubit extends BaseCubit {  final WorkHazardsRepository _repository;  final ProjectsManagementRepository projectsRepository;  final UsersManagementRepository usersRepository;  final FocusPointsRepository focusPointsRepository;  AddWorkHazardCubit(this._repository, this.projectsRepository, this.usersRepository, this.focusPointsRepository);  StreamDataStateInitial<List<CommonListItem>?> hazardTypeInstructionsStream =      StreamDataStateInitial<List<CommonListItem>?>();  StreamDataStateInitial<List<CommonListItem>?> projectsStream = StreamDataStateInitial<List<CommonListItem>?>();  StreamDataStateInitial<List<ShiftsByProject>?> shiftsStream =  StreamDataStateInitial<List<ShiftsByProject>?>();  void fetchInitialData(int? id) async {    executeBuilder(() => _repository.fetchWorkHazardsTypes(),        onSuccess: (workHazardsTypes) async {      final hazardPriorityLevels =          await _repository.fetchHazardPriorityLevels();      final companies =      await projectsRepository.fetchCompanies();      final workHazardData =          id != null ? await _repository.fetchWorkHazardDetails(id) : null;      if (id != null && workHazardData!.hazardTypeId != null) {        fetchHazardTypeInstructionsByTypeId(workHazardData.hazardTypeId!);      }      emit(Initialized<AddWorkHazardState>(          data: AddWorkHazardState(              workHazardsTypes: workHazardsTypes,              hazardPriorityLevels: hazardPriorityLevels,              workHazardData: workHazardData,              hazardTypeInstructionsStream: hazardTypeInstructionsStream,              companies: companies,              projectsStream: projectsStream,              shiftsStream: shiftsStream,          )));    });  }  void fetchHazardTypeInstructionsByTypeId(int typeId) async {    try {      final response =          await _repository.fetchHazardTypeInstructionsByTypeId(typeId);      hazardTypeInstructionsStream.setData(response);    } catch (e) {      hazardTypeInstructionsStream.setError(e);      rethrow;    }  }  void addWorkHazard(AddWorkHazardParams params, List<File> files)  {    executeListener(() => _repository.addWorkHazard(params),        onSuccess: (response) async {      print('uploadWorkHazardFiles files: $files');      if (files.isNotEmpty) {        await _repository.uploadWorkHazardFiles(UploadWorkHazardFilesParams(            id: response.payload!.id ?? 0, files: files));      }      emit((SuccessStateListener(data: response.message.toString())));    });  }  Future<void> fetchProjectsCompanyId(int companyId) async {    try {      final data = await usersRepository.fetchListProjectsByCompanyId(companyId);      projectsStream.setData(data);    } on Exception catch (e) {      projectsStream.setError(e);    }  }  Future<void> fetchShiftByProjectId(int projectId) async {    try {      print('projectIds $projectId');      final response = await focusPointsRepository.fetchShiftsByProjectId(projectId);      List<ShiftsByProject> shifts =      response.map((e) => ShiftsByProject.fromJson(e)).toList();      shiftsStream.setData(shifts);    } catch (e) {      print('error $e');      shiftsStream.setError(e);    }  }}