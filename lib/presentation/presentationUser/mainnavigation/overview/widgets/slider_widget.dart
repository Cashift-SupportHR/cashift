import 'package:flutter/material.dart';import 'package:shiftapp/extensions/extensions.dart';import '../../../../../domain/entities/shared/date_formatter.dart';import '../../../../../domain/entities/job_offers/job_offer_dto.dart';import '../../../../../utils/app_icons.dart';import '../../../../shared/components/decorations/decorations.dart';import '../../../../shared/components/image_builder.dart';import '../../../joboffers/widgets/job_offer_item_widget.dart';import '../../../resources/colors.dart';import '../../../resources/constants.dart';import 'opportunity_conditions.dart';import 'payment_widget.dart';import 'slider_container.dart';import 'text_value_slider.dart';class OfferSliderWidget extends JobOfferItemBuilderBase{  OfferSliderWidget(super.jobOffer, {    required super.onClickApply, required super.onClickDetails,  });  String remainingCount(JobOfferDto job) {    return job.isExpired()        ? '${strings.expired}'        : '${job.actualNumber ?? ""} ${strings.remaining_chances ?? ''}';  }  String getShiftTime(JobOfferDto jobOffer) {    final end = hourFromDate(jobOffer.opportunitiesEndTime ?? '');    final start = hourFromDate(jobOffer.opportunitiesStrartTime ?? '');    return '${strings.from}'        '$start '        '${strings.too}'        ' $end';  }  String hourFromDate(String date) {    return DateFormatter.formatDateString(        date, DateFormatter.HOUR_MINUT, DateFormatter.HOUR_MINUT_12,        local: local);  }  @override  Widget buildWidget(BuildContext context) {    return Container(        decoration: Decorations.boxDecorationShaded(color: Colors.white).copyWith(            image: !jobOffer.joblogo.isNullOrEmpty() && jobOffer.showBackgroundInSlider==true ?            DecorationImage(              image: Image.network(                jobOffer.joblogo!,                errorBuilder: (context, _, c) {                  return Container();                },              ).image,              fit: BoxFit.fill,            ):null        ),        margin: const EdgeInsets.only(top: 8, bottom: 14),        width: double.infinity,        child: Column(          crossAxisAlignment: CrossAxisAlignment.center,          mainAxisAlignment: MainAxisAlignment.center,          children: [            Row(              mainAxisAlignment: jobOffer.showQuantity == true ? MainAxisAlignment.spaceBetween : MainAxisAlignment.center,              crossAxisAlignment: CrossAxisAlignment.start,              children: [                if(jobOffer.showQuantity == true)                  SliderContiner(                      color: kPrimary,                      text:                      "${strings.total} ${jobOffer.requirmentCount ?? ''} ${strings.opportunity}",                      isActive: false),                kBuildCircleImage(jobOffer.pathLogo ?? '',                    border: 3, size: 78, borderColor: kPrimaryDark),                if(jobOffer.showQuantity == true)                  SliderContiner(                      color: jobOffer.isExpired() ? kRed : kOrange,                      text: remainingCount(jobOffer),                      isActive: true),              ],            ),            jobName(jobOffer, style: kTextBoldTitle.copyWith(color: kPrimary, fontSize: 16)),            buildProjectNameWidget(jobOffer, isPadding: false),            Text(              jobOffer.projectAddress ?? "",              style: kTextRegular.copyWith(                  color: kAlmostBlack.withOpacity(.7), fontSize: 12),            ),            Row(              children: [                Expanded(                  child: TextAndValue(                      image: AppIcons.calendar,                      text: strings.opportunity_date,                      value: jobOffer.workingDate ?? "",                      isText: true,                      widget: Container()),                ),                const SizedBox(                  width: 10,                ),                navigateLocationButton(context,sizeIcon: 18),                const SizedBox(                  width: 3,                ),              ],            ),            TextAndValue(                image: AppIcons.timer,                text: strings.time_opportunity,                value: getShiftTime(jobOffer),                isText: true,                widget: Container()),            OpportunityConditionsSlider(              jobRequirements: jobOffer.jobRequirements,              qualification: jobOffer.qualificationName,            ),            PaymentWidget(objPayment: jobOffer.objPayment ?? []),            Padding(              padding: const EdgeInsets.symmetric(horizontal: 8),              child: buildApplyButton(jobOffer, context, isLastButtonAlignment: false, sizeIcon: 30),            ),          ],        ));  }}