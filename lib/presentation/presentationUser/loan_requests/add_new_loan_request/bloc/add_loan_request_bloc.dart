import 'package:injectable/injectable.dart';import 'package:shiftapp/core/bloc/base_cubit.dart';import 'package:shiftapp/domain/entities/loans_request/index.dart';import '../../../../../data/repositories/financial_requests/loans_request_repository.dart';import '../../../common/common_state.dart';import 'package:shiftapp/data/models/loans_request/index.dart';@Injectable()class AddLoanRequestCubit extends BaseCubit {   final LoansRequestRepository _repository;   AddLoanRequestCubit(this._repository);   final loanNumMonthConditionStream = StreamStateInitial<LoanNumMonthCondition?>();   final idNumberStream = StreamStateInitial<NameByIdNumber?>();   addNewLoanRequest( AddLoanRequestParams params) async {     try {       emit(LoadingStateListener());       final message = await _repository.addNewLoanRequest( params);       emit(SuccessStateListener(data: message));     } catch (e) {       emit(FailureStateListener(e));     }   }   fetchLoansTypes() async{      emit(LoadingState());      try {        final loanTypesDto = await _repository.fetchLoansTypes();        List<LoanType> loanTypes = loanTypesDto.map((e) => LoanType.fromJson(e)).toList();        emit(Initialized<List<LoanType>>(data: loanTypes));      } catch (e) {        emit(ErrorState(e));      }   }   fetchLoanNumMonthsConditions(int id) async{     try {       final dataDto = await _repository.fetchLoanNumMonthsConditions(id);       LoanNumMonthCondition data = LoanNumMonthCondition.fromJson(dataDto);       loanNumMonthConditionStream.setData(data);     } catch (e) {       emit(ErrorState(e));     }   }   fetchNamedByIdNumber(String idNumber) async {     try {       final data =       await _repository.fetchNamedByIdNumber(idNumber: idNumber);       idNumberStream.setData(data.payload);     } catch (e) {       idNumberStream.setError(e);     }   }}