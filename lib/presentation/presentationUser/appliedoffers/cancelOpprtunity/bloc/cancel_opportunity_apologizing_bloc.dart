import 'package:injectable/injectable.dart';import 'package:shiftapp/core/bloc/base_cubit.dart';import 'package:shiftapp/domain/entities/appliedOffers/index.dart';import 'package:shiftapp/presentation/presentationUser/common/common_state.dart'; import '../../../../../data/repositories/joboffers/job_offers_repository.dart';@Injectable()class CancelOpportunityApologizingCubit extends BaseCubit {   final JobOffersRepository _repository;   CancelOpportunityApologizingCubit(this._repository);   Future<void> fetchInitialData(int id) async{      executeBuilder(() => _repository.fetchCancelOpportunityApologizingData(id), onSuccess: (data){         CancelOpportunityApologizing _data = CancelOpportunityApologizing.fromDto(data.payload!);          emit(Initialized<CancelOpportunityApologizing>(data: _data));      });   }   Future<void> cancelOpportunityApologizing(int id) async{      executeBuilder(() => _repository.fetchCancelOpportunityApologizingData(id), onSuccess: (data){         CancelOpportunityApologizing _data = CancelOpportunityApologizing.fromDto(data.payload!);         emit(Initialized<CancelOpportunityApologizing>(data: _data));      });   }}