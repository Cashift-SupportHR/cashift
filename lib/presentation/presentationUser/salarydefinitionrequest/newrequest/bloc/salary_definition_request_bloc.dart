import 'package:injectable/injectable.dart';import 'package:shiftapp/core/bloc/base_cubit.dart';import '../../../../../data/models/salary-definition-request/AddSalaryDefinationRequestPrams.dart';import '../../../../../data/models/salary-definition-request/reason_salary_definition_request_dto.dart';import '../../../../../data/repositories/salary-definition-request/salary_definition_repository.dart';import '../../../../../domain/entities/salary-definition-request/reason_salary_definition_request.dart';import '../../../common/common_state.dart';@Injectable()class AddSalaryDefinitionRequestCubit extends BaseCubit {   final SalaryDefinitionRepository repository;   AddSalaryDefinitionRequestCubit(this.repository);   fetchTypeOFCommerce( ) async {    try{      emit(LoadingState());      final typeOFCommerce =await repository.fetchTypeOFCommerce( );      List<ReasonSalaryDefinitionRequestDto> reasons = await repository.fetchReasonSalaryDefinitionRequest( );      emit(InitializedAddSalaryDefinitionRequest(          reasons: List<ReasonSalaryDefinitionRequest>.from(reasons.map((e) => ReasonSalaryDefinitionRequest.fromJson(e))),          typeOfCommerce: typeOFCommerce,      ));    }catch(e){      emit(ErrorState(e));    }  }  //addSalaryDefinition   addSalaryDefinition({     required AddSalaryDefinitionRequestPrams addSalaryDefinitionRequestPrams   }) async {     try {       emit(LoadingStateListener());       final message = await repository.addSalaryDefinition(            addSalaryDefinitionRequestPrams: addSalaryDefinitionRequestPrams);       emit(SuccessStateListener(data: message));     } catch (e) {       emit(FailureStateListener(e));     }   }}