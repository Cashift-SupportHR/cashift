import 'package:flutter/material.dart';import '../../../../../data/models/salary-definition-request/AddSalaryDefinationRequestPrams.dart';import '../../../../../data/models/salary-definition-request/type_of_commerce.dart';import '../../../../../domain/entities/salary-definition-request/reason_salary_definition_request.dart';import '../../../../shared/components/text_field/build_text_field_item.dart';import '../../../../shared/components/app_cupertino_button.dart';import '../../../../shared/components/base_stateless_widget.dart';import '../../../../shared/components/dropdown/droup_down_custom3.dart';import '../../../../shared/components/outlint_button.dart';import '../../../common/common_state.dart';import '../../../resources/colors.dart';import '../../../resources/constants.dart';import '../widgets/reason_salary_definition_picker.dart';class SalaryDefinitionRequestScreen extends BaseStatelessWidget {  SalaryDefinitionRequestScreen({Key? key,required this.itemTypeOfCommerce,required this.onAddSalaryDefinition, required this.reasons}) : super(key: key);  var directionDirectedController = TextEditingController();  var purposeRequestController = TextEditingController();  final List<ReasonSalaryDefinitionRequest> reasons;  List<TypeOfCommerce>  itemTypeOfCommerce;  StreamState<String> descriptionStream = StreamStateInitial();  final  Function (AddSalaryDefinitionRequestPrams  data) onAddSalaryDefinition;  int?  needStamp;  String reasonId = '';  final _formKey = GlobalKey<FormState>();  @override  Widget build(BuildContext context) {    return Scaffold(      bottomNavigationBar:  butWidget(context),      body: Form(          key: _formKey,          child: SingleChildScrollView(            padding: const EdgeInsets.all(28),            child: Column(              children: [                BuildTextFieldItem(                  title: strings.direction_directed,                  controller: directionDirectedController,                  hintText: strings.write_direction_directed,                  keyboardType: TextInputType.text,                  validator: (value) {                    if (value!.isEmpty) {                      return strings.validate_direction_directed;                    }                    return null;                  },                ),                const SizedBox(                  height: 10,                ),                ReasonSalaryDefinitionRequestPicker(                 reasons: reasons,                  contractsController: purposeRequestController,                  onSelectItem: (value) {                    purposeRequestController.text = value.value;                    reasonId = value.description ?? '';                  },                ),                const SizedBox(                  height: 10,                ),                dropDownWidget(),                const SizedBox(                  height: 14,                ),                textContainer(  ),              ],            ),          )),    );  }  dropDownWidget() {    return Column(      mainAxisAlignment: MainAxisAlignment.start,      crossAxisAlignment: CrossAxisAlignment.start,      children: [        Text(          strings.commerce_ratification,          style: kTextMedium.copyWith(fontSize: 12, color: kPrimary),        ),        const SizedBox(          height: 8,        ),        DropDownCustom3(          items: itemTypeOfCommerce,          hintText: strings.select,          validator: strings.validate_commerce_ratification,          onChanged: (value) {            // setState(() {            //   valueDroup = value! as String?;            // });            String?  description=  itemTypeOfCommerce.firstWhere((element) =>            value== element.name            ).descrition;            needStamp =  itemTypeOfCommerce.firstWhere((element) =>            value== element.name            ).type;            descriptionStream.setData( description!);            print("----------------------");            // print(valueDroup);          },        )      ],    );  }  textContainer() {    return StreamBuilder<String>(        stream: descriptionStream.stream,        builder: (context, snapshot) {          return            (snapshot.data==null|| snapshot.data!.isEmpty  )? const SizedBox():            Container(              height: 40,              width: double.infinity,              color: const Color(0xffE5F4EF),              child: Padding(                padding: const EdgeInsets.symmetric(horizontal: 10),                child: Row(                  children:  [                    const Icon(                      Icons.error_outline,                      color: Colors.grey,                    ),                    const SizedBox(                      width: 5,                    ),                    Flexible(child: Text(                      snapshot.data.toString()??'',                    )),                  ],                ),              ),            );        }    );  }  butWidget(context) {    return Padding(      padding: const EdgeInsets.all(28),      child: Row(        children: [          Expanded(            child: AppOutlineButton(              height: 60,              onClick: () {                Navigator.pop(context);              },              text: strings.cancel,              radius: 5,              padding: const EdgeInsets.symmetric(vertical: 15),            ),          ),          const SizedBox(            width: 28,          ),          Expanded(            child: AppCupertinoButton(              onPressed: () {                if (_formKey.currentState!.validate()) {                  onAddSalaryDefinition(AddSalaryDefinitionRequestPrams(                      slipForDistination: directionDirectedController.text,                      resonF: purposeRequestController.text,                      needStamp: needStamp,                    reasonId: reasonId                  ));                }              },              height: 40,              text: strings.save_button,              elevation: 0,              radius: BorderRadius.circular(5),            ),          ),        ],      ),    );  }// List<String> items = ['yes', 'no'];}