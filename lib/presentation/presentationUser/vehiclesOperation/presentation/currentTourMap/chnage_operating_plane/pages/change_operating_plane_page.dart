import 'package:shiftapp/presentation/presentationUser/common/common_state.dart';import 'package:shiftapp/presentation/shared/components/base_widget_bloc.dart';import '../../../../../../../main_index.dart';import '../../../../../common/stream_data_state.dart';import '../../../../data/models/index.dart';import '../../../../domain/entities/index.dart';import '../../../startTour/bloc/start_tour_state.dart';import '../../../startTour/pages/start_tour_screen.dart';import '../bloc/change_operating_plane_cubit.dart';class ChangeOperatingPlanePage    extends BaseBlocWidget<Initialized<StartTourState>, ChangeOperatingPlaneCubit> {  final CurrentRoundTrip currentRoundTrip;  final Function() onRefresh;  ChangeOperatingPlanePage({super.key, required this.currentRoundTrip, required this.onRefresh});  @override  void loadInitialData(BuildContext context) {    bloc.fetchInitialData(currentRoundTrip);  }  @override  Widget buildWidget(BuildContext context, Initialized<StartTourState> state) {    return StartTourScreen(      state: state.data,      initialData: currentRoundTrip,      onFetchRoundTypeTermsAndCondition: (int roundTypeId) {        bloc.fetchRoundTypeTermsAndCondition(roundTypeId);      },      onAddRoundTrip: (AddRoundTripParams params) {        bloc.addRoundTripDetails(AddRoundTripDetailsParams(          roundTripId: params.id,          roundTypeId: params.roundTypeId,          vehicleZoneId: params.vehiclesZoneId,          notes: '',        ));      },    );  }  @override  void onSuccessDismissed() {    onRefresh();    Navigator.pop(context);  }}