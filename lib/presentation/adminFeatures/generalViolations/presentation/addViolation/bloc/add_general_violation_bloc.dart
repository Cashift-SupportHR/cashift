import 'dart:io';import 'package:injectable/injectable.dart';import 'package:shiftapp/core/bloc/base_cubit.dart';import 'package:shiftapp/presentation/presentationUser/common/common_state.dart';import '../../../../../adminFeatures/focusPoints/data/models/index.dart';import '../../../../../adminFeatures/focusPoints/domain/entities/shifts_by_project.dart';import '../../../../../adminFeatures/projectsManagement/data/models/index.dart';import '../../../../../adminFeatures/usersManagement/data/models/index.dart';import '../../../../../presentationUser/common/stream_data_state.dart';import '../../../../../presentationUser/workHazards/data/models/upload_work_hazard_files_params.dart';import '../../../../../shared/models/common_list_item.dart';import '../../../data/models/index.dart';import '../../../domain/entities/index.dart';import '../../../domain/entities/violation_employee.dart';import 'add_general_violation_state.dart';@Injectable()class AddGeneralViolationCubit extends BaseCubit {  final GeneralViolationsRepository _repository;  final ProjectsManagementRepository projectsRepository;  final UsersManagementRepository usersRepository;  final FocusPointsRepository focusPointsRepository;  AddGeneralViolationCubit(this._repository, this.projectsRepository, this.usersRepository, this.focusPointsRepository);  StreamDataStateInitial<List<ViolationByProjectId>?> violationTypesByProjectIdStream =      StreamDataStateInitial<List<ViolationByProjectId>?>();  StreamDataStateInitial<List<CommonListItem>?> projectsStream = StreamDataStateInitial<List<CommonListItem>?>();  StreamDataStateInitial<List<ShiftsByProject>?> shiftsStream =  StreamDataStateInitial<List<ShiftsByProject>?>();  StreamDataStateInitial<List<ViolationEmployee>?> employeesStream = StreamDataStateInitial<List<ViolationEmployee>?>();  void fetchInitialData(int? id) async {    print('fetchInitialData id: $id');    GeneralViolation? initialData;    executeBuilder(() => projectsRepository.fetchCompanies(),        onSuccess: (companies) async {      if (id != null) {        initialData = await _repository.fetchGeneralViolationDetails(id ?? 0);         fetchProjectsCompanyId(initialData?.companyId ?? 0);         fetchShiftByProjectId(initialData?.projectId ?? 0);         fetchViolationsTypesByProjectId(initialData?.projectId ?? 0);         fetchEmployeeWorksByShiftId(initialData?.shiftId ?? 0);      }      emit(Initialized<AddGeneralViolationState>(          data: AddGeneralViolationState(              companies: companies,              projectsStream: projectsStream,              shiftsStream: shiftsStream,              violationTypesByProjectIdStream: violationTypesByProjectIdStream,              employeesStream: employeesStream,              initialData: initialData)));    });  }  void addGeneralViolation(AddGeneralViolationParams params, List<File> files)  {    executeListener(() => _repository.addGeneralViolation(params),        onSuccess: (response) async {          if (files.isNotEmpty) {            final res = await _repository.uploadWorkHazardFiles(UploadWorkHazardFilesParams(                id: response.payload!.id ?? 0, files: files));          }      emit((SuccessStateListener(data: response.message.toString())));    });  }  Future<void> fetchProjectsCompanyId(int companyId) async {    try {      final data = await usersRepository.fetchListProjectsByCompanyId(companyId);      projectsStream.setData(data);    } catch (e) {      projectsStream.setError(e);    }  }  Future<void> fetchShiftByProjectId(int projectId) async {    try {      final response = await focusPointsRepository.fetchShiftsByProjectId(projectId);      List<ShiftsByProject> shifts =      response.map((e) => ShiftsByProject.fromJson(e)).toList();      shiftsStream.setData(shifts);    } catch (e) {      print('error $e');      shiftsStream.setError(e);    }  }  Future<void> fetchViolationsTypesByProjectId(int id) async {    try {      final data = await _repository.fetchViolationsTypesByProjectId(id);      violationTypesByProjectIdStream.setData(data);    } catch (e) {      violationTypesByProjectIdStream.setError(e);      rethrow;    }  }  Future<void> fetchEmployeeWorksByShiftId(int id) async {    try {      final data = await _repository.fetchEmployeeWorksByShiftId(id);      employeesStream.setData(data);    } catch (e) {      employeesStream.setError(e);      rethrow;    }  }}