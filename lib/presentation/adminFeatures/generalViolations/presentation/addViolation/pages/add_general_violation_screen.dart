import 'dart:io';import 'package:shiftapp/presentation/presentationUser/resources/colors.dart';import 'package:shiftapp/presentation/presentationUser/salarydefinitionrequest/requests/widgets/warning_widget.dart';import 'package:shiftapp/presentation/shared/components/dialogs_manager.dart';import '../../../../../adminFeatures/focusPoints/domain/entities/shifts_by_project.dart';import '../../../../../adminFeatures/usersManagement/presentation/addNewUser/widgets/company_picker.dart';import '../../../../../presentationUser/common/stream_data_state.dart';import '../../../../../presentationUser/workHazards/presentation/addWorkHazard/widgets/upload_files_list.dart';import '../../../../../shared/components/index.dart';import '../../../../../shared/components/picker/projects_picker_stream.dart';import '../../../data/models/add_general_violation_params.dart';import '../../../domain/entities/index.dart';import '../../../domain/entities/violation_employee.dart';import '../bloc/add_general_violation_state.dart';class AddGeneralViolationScreen extends BaseStatelessWidget {  final AddGeneralViolationState state;  final Function(int id) onFetchProjectsByCompanyId;  final Function(int id) onFetchShiftsByProjectId;  final Function(int id) onFetchViolationTypesByProjectId;  final Function(int id) onFetchEmployeeWorksByShiftId;  final Function(AddGeneralViolationParams, List<File>) onAdd;  AddGeneralViolationScreen(      {Key? key,      required this.state,      required this.onFetchProjectsByCompanyId,      required this.onFetchShiftsByProjectId,      required this.onFetchViolationTypesByProjectId,      required this.onFetchEmployeeWorksByShiftId,      required this.onAdd,      })      : super(key: key);  final _formKey = GlobalKey<FormState>();  int companyId = 0;  int projectId = 0;  int shiftId = 0;  int violationId = 0;  int employeeId = 0;  TextEditingController projectController = TextEditingController();  TextEditingController shiftController = TextEditingController();  TextEditingController violationTypeController = TextEditingController();  TextEditingController employeeNameController = TextEditingController();  StreamDataStateInitial<String> discountValueStream = StreamDataStateInitial<String>();  List<File> files = [];  @override  Widget build(BuildContext context) {    _initData();    return Form(      key: _formKey,      child: SingleChildScrollView(        padding: const EdgeInsets.all(16),        child: Column(          crossAxisAlignment: CrossAxisAlignment.start,          mainAxisAlignment: MainAxisAlignment.start,          children: [            companiesPicker(),            projectsPickerStream(),            shiftsPickerStream(),            violationTypePicker(context),            employeesPicker(context),            discountValue(),            UploadFilesList(              initialValueList: state.initialData?.imagesUrls ?? [],              onPicker: (filesValue) {                files = filesValue;              },            ),            rowButtons(context),          ],        ),      ),    );  }  CompanyPicker companiesPicker() {    return CompanyPicker(      items: state.companies ?? [],      initialValue: state.initialData?.companyName ?? '',      onSelectItem: (item) {        companyId = item.index;        projectController.clear();        shiftController.clear();        violationTypeController.clear();        projectId = 0;        shiftId = 0;        violationId = 0;        onFetchProjectsByCompanyId(companyId);      },    );  }  ProjectsPickerStream projectsPickerStream() {    return ProjectsPickerStream(      projectsStream: state.projectsStream,      projectController: projectController,      onSelectItem: (id) {        projectId = id;        shiftController.clear();        violationTypeController.clear();        shiftId = 0;        onFetchShiftsByProjectId(projectId);        onFetchViolationTypesByProjectId(projectId);      },    );  }  StreamDataStateWidget<List<ShiftsByProject>?> shiftsPickerStream() {    return StreamDataStateWidget<List<ShiftsByProject>?>(        stream: state.shiftsStream,        builder: (context, data) {          return BottomSheetTextFieldRectangle(            title: strings.working_period,            hintText: strings.select_working_period,            controller: shiftController,            initValue: state.initialData?.shiftName ?? '',            items: ShiftsByProject.toItemsListPicker(data ?? []),            onSelectItem: (item) {              shiftController.text = item.value;              shiftId = item.index;              onFetchEmployeeWorksByShiftId(shiftId);            },          );        });  }  StreamDataStateWidget<List<ViolationByProjectId>?> violationTypePicker(BuildContext context) {    return StreamDataStateWidget<List<ViolationByProjectId>?>(        stream: state.violationTypesByProjectIdStream,      builder: (context, data) {        return BottomSheetTextFieldRectangle(          title: strings.violation_name,          hintText: strings.select_violation_name,          controller: violationTypeController,          initValue: state.initialData?.scheduleViolationName,          items: ViolationByProjectId.toItemsListPicker(data ?? []),          onSelectItem: (item) {            violationTypeController.text = item.value;            violationId = item.index;            discountValueStream.setData(item.description ?? '0.0');          },        );      }    );  }  StreamDataStateWidget<List<ViolationEmployee>?> employeesPicker(BuildContext context) {    return StreamDataStateWidget<List<ViolationEmployee>?>(        stream: state.employeesStream,        builder: (context, data) {          return BottomSheetTextFieldRectangle(            title: strings.employee_name,            hintText: strings.select_employee_name,            controller: employeeNameController,            initValue: state.initialData?.employeeName ?? '',            items: ViolationEmployee.toItemsListPicker(data ?? []),            onSelectItem: (item) {              employeeNameController.text = item.value;              employeeId = item.index;            },          );        }    );  }  StreamDataStateWidget discountValue() {    return StreamDataStateWidget<String>(        stream: discountValueStream,        builder: (context, data) {          return WarningWidget(            warningText: "${strings.discount_value} $data ${strings.saudi_riyals}",            margin: const EdgeInsetsDirectional.only(end: 10, top: 16, bottom: 16),            color: kPrimary,          );        }    );  }  RowButtons rowButtons(BuildContext context) {    return RowButtons(      onSave: () {        if (_formKey.currentState!.validate()) {          if ((state.initialData != null || files.isEmpty) || companyId == 0 || projectId == 0 || shiftId == 0 || violationId == 0 || employeeId == 0) {            DialogsManager.showErrorDialog(context, strings.please_fill_all_fields);          } else {            onAddPressed();          }        }      },      margin: const EdgeInsets.only(top: 16),      onCancel: () {        Navigator.pop(context);      },    );  }  onAddPressed() {    onAdd(      AddGeneralViolationParams(        id: state.initialData?.id ?? 0,        companyId: companyId,        projectId: projectId,        shiftId: shiftId,        scheduleViolationId: violationId,        scheduleEmployeeWorkId: employeeId,      ),      files,    );  }  _initData() {    if (state.initialData != null) {      print('state.initialData: ${state.initialData?.shiftName}');      companyId = state.initialData?.companyId ?? 0;      projectId = state.initialData?.projectId ?? 0;      shiftId = state.initialData?.shiftId ?? 0;      violationId = state.initialData?.scheduleViolationId ?? 0;      employeeId = state.initialData?.scheduleEmployeeWorkId ?? 0;      projectController.text = state.initialData?.projectName ?? '';      employeeNameController.text = state.initialData?.employeeName ?? '';      discountValueStream.setData(state.initialData?.violationAmount?.toString() ?? '0.0');    }  }}