import 'package:shiftapp/presentation/presentationUser/resources/colors.dart';import 'package:shiftapp/presentation/presentationUser/resources/validation.dart';import 'package:shiftapp/presentation/presentationUser/salarydefinitionrequest/requests/widgets/warning_widget.dart';import '../../../../../adminFeatures/usersManagement/presentation/addNewUser/widgets/company_picker.dart';import '../../../../../shared/components/index.dart';import '../../../../../shared/components/picker/projects_picker_stream.dart';import '../../../../../shared/components/text_field/build_text_field_item.dart';import '../../../../../shared/models/common_list_item.dart';import '../../../data/models/add_type_violation_params.dart';import '../../../domain/entities/index.dart';import '../bloc/add_type_violation_state.dart';class AddTypeViolationScreen extends BaseStatelessWidget {  final AddTypeViolationState state;  final ViolationType? initialData;  final Function(int id) onFetchProjectsByCompanyId;  final Function(AddTypeViolationParams) onAdd;  AddTypeViolationScreen(      {Key? key,      required this.state,      this.initialData,      required this.onFetchProjectsByCompanyId,      required this.onAdd})      : super(key: key);  final _formKey = GlobalKey<FormState>();  int companyId = 0;  int projectId = 0;  int violationTypeId = 0;  TextEditingController projectController = TextEditingController();  TextEditingController violationTypeController = TextEditingController();  TextEditingController violationNameArController = TextEditingController();  TextEditingController violationNameEnController = TextEditingController();  TextEditingController discountValueController = TextEditingController();  @override  Widget build(BuildContext context) {    _initData();    return Form(      key: _formKey,      child: SingleChildScrollView(        padding: const EdgeInsets.all(16),        child: Column(          crossAxisAlignment: CrossAxisAlignment.start,          mainAxisAlignment: MainAxisAlignment.start,          children: [            companiesPicker(),            projectsPickerStream(),            violationTypePicker(context),            violationNameArTextField(context),            violationNameEnTextField(context),            discountValueTextField(context),            rowButtons(context),          ],        ),      ),    );  }  CompanyPicker companiesPicker() {    return CompanyPicker(      items: state.companies ?? [],      initialValue: initialData?.companyName,      onSelectItem: (item) {        companyId = item.index;        projectController.clear();        projectId = 0;        onFetchProjectsByCompanyId(companyId);      },    );  }  ProjectsPickerStream projectsPickerStream() {    return ProjectsPickerStream(      projectsStream: state.projectsStream,      projectController: projectController,      onSelectItem: (id) {        projectId = id;      },    );  }  BuildTextFieldItem violationTypePicker(BuildContext context) {    return BuildTextFieldItem(      title: strings.violation_type,      hintText: strings.select_type,      suffixIcon: Icons.keyboard_arrow_down,      controller: violationTypeController,      onTap: () {        ListPickerWidget.showPicker(          context: context,          setSearch: true,          title: strings.select_type,          items: CommonListItem.toItemsListPicker(state.violationsTypes),          onSelectItem: (value) {            violationTypeController.text = value.value;            violationTypeId = value.index;          },        );      },    );  }  BuildTextFieldItem violationNameArTextField(BuildContext context) {    return BuildTextFieldItem(      title: strings.violation_name_ar,      hintText: strings.type_violation_name_ar,      controller: violationNameArController,      keyboardType: TextInputType.text,      validator: (value) => Validation.validateArabicText(context, value),    );  }  BuildTextFieldItem violationNameEnTextField(BuildContext context) {    return BuildTextFieldItem(      title: strings.violation_name_en,      hintText: strings.type_violation_name_en,      controller: violationNameEnController,      keyboardType: TextInputType.text,      validator: (value) => Validation.validateEnglishText(context, value),    );  }  BuildTextFieldItem discountValueTextField(BuildContext context) {    return BuildTextFieldItem(      title: strings.discount_value,      hintText: strings.type_discount_value,      controller: discountValueController,    );  }  RowButtons rowButtons(BuildContext context) {    return RowButtons(      onSave: () {        if (_formKey.currentState!.validate()) {          onAddTypeViolationPressed();        }      },      margin: const EdgeInsets.only(top: 16),      onCancel: () {        Navigator.pop(context);      },    );  }  onAddTypeViolationPressed() {    onAdd(      AddTypeViolationParams(        id: initialData?.id ?? 0,        projectId: projectId,        companyId: companyId,        nameAr: violationNameArController.text,        nameEn: violationNameEnController.text,        violationAmount: num.parse(discountValueController.text).toDouble(),        scheduleViolationsTypeId: violationTypeId,      ),    );  }  _initData() {    print('initialData: $initialData');    if (initialData != null) {      companyId = initialData!.companyId ?? 0;      projectId = initialData!.projectId ?? 0;      projectController.text = initialData!.projectName ?? '';      violationTypeController.text =          initialData!.scheduleViolationsTypeName ?? '';      violationTypeId = initialData!.scheduleViolationsTypeId ?? 0;      violationNameArController.text = initialData!.nameAr ?? '';      violationNameEnController.text = initialData!.nameEn ?? '';      discountValueController.text =          initialData!.violationAmount?.toString() ?? '0.0';    }  }  warningWidget() {    return WarningWidget(      warningText: strings.add_complaint_files_desc,      margin: const EdgeInsetsDirectional.only(end: 10, top: 16, bottom: 16),      color: kPrimary,    );  }}