import 'dart:io';import 'package:injectable/injectable.dart';import 'package:shiftapp/core/bloc/base_cubit.dart';import 'package:shiftapp/presentation/presentationUser/common/common_state.dart';import '../../../../../adminFeatures/focusPoints/data/models/index.dart';import '../../../../../adminFeatures/projectsManagement/data/models/index.dart';import '../../../../../adminFeatures/usersManagement/data/models/index.dart';import '../../../../../presentationUser/common/stream_data_state.dart';import '../../../../../shared/models/common_list_item.dart';import '../../../data/models/add_type_violation_params.dart';import '../../../data/models/index.dart';import 'add_type_violation_state.dart';@Injectable()class AddTypeViolationCubit extends BaseCubit {  final GeneralViolationsRepository _repository;  final ProjectsManagementRepository projectsRepository;  final UsersManagementRepository usersRepository;  final FocusPointsRepository focusPointsRepository;  AddTypeViolationCubit(this._repository, this.projectsRepository, this.usersRepository, this.focusPointsRepository);  StreamDataStateInitial<List<CommonListItem>?> projectsStream = StreamDataStateInitial<List<CommonListItem>?>();  void fetchInitialData(int? companyId) async {    executeBuilder(() => _repository.fetchViolationsTypes(),        onSuccess: (workHazardsTypes) async {      final companies =      await projectsRepository.fetchCompanies();      final violationsTypes =      await _repository.fetchViolationsTypes();      if (companyId != null) {        await fetchProjectsCompanyId(companyId);      }      emit(Initialized<AddTypeViolationState>(          data: AddTypeViolationState(            companies: companies,            projectsStream: projectsStream,            violationsTypes: violationsTypes,          )));    });  }  void addTypeViolation(AddTypeViolationParams params)  {    executeEmitterListener(() => _repository.addTypeViolation(params));  }  Future<void> fetchProjectsCompanyId(int companyId) async {    try {      final data = await usersRepository.fetchListProjectsByCompanyId(companyId);      projectsStream.setData(data);    } on Exception catch (e) {      projectsStream.setError(e);    }  }}