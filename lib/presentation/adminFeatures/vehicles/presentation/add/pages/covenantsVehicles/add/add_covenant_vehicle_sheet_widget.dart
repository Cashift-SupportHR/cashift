import 'dart:io';import 'package:shiftapp/presentation/shared/components/index.dart';import '../../../../../../../presentationUser/workHazards/presentation/addWorkHazard/widgets/upload_files_list.dart';import '../../../../../../../shared/components/text_field/build_text_field_item.dart';import '../../../../../data/models/add_covenant_vehicle_params.dart';import '../../../../../domain/entities/covenant_vehicle.dart';class AddVehicleCovenantSheetWidget extends BaseStatelessWidget {  final CovenantVehicle? initialData;  final Function(AddCovenantVehicleParams) onAddCovenant;  AddVehicleCovenantSheetWidget({    Key? key,    this.initialData,    required this.onAddCovenant,  }) : super(key: key);  TextEditingController covenantNameController = TextEditingController();  TextEditingController covenantDescController = TextEditingController();  File? file;  final _formKey = GlobalKey<FormState>();  @override  Widget build(BuildContext context) {    _initialValues();    return Scaffold(      bottomNavigationBar: RowButtons(        textSaveButton: strings.next,        onSave: () {          if (_formKey.currentState!.validate()) {            onAddProjectPressed(context);          }        },        onCancel: () {          Navigator.pop(context);        },      ),      body: SizedBox(child: Form(          key: _formKey,          child: SingleChildScrollView(            child: Column(              children: [                covenantNameTextField(),                covenantDescTextField(),                uploadFilesList(),              ],            ),          ))),    );  }  BuildTextFieldItem covenantNameTextField() {    return BuildTextFieldItem(      title: strings.covenant_name,      hintText: strings.type_covenant_name,      controller: covenantNameController,      keyboardType: TextInputType.text,    );  }  BuildTextFieldItem covenantDescTextField() {    return BuildTextFieldItem(      title: strings.covenant_desc,      hintText: strings.type_covenant_desc,      controller: covenantDescController,      keyboardType: TextInputType.multiline,      minLines: 5,    );  }  UploadFilesOnly uploadFilesList() {    return UploadFilesOnly(        initialValue: initialData?.custodyImagePath ?? '',        onPicker: (filesValue) {          file = filesValue;        },      );  }  _initialValues() {    if (initialData != null) {      covenantNameController.text = initialData?.name ?? '';      covenantDescController.text = initialData?.description  ?? '';    }  }  onAddProjectPressed(BuildContext context) {    if (file != null || initialData != null) {      onAddCovenant(AddCovenantVehicleParams(        id: initialData?.id ?? 0,        custodyImage: file,        vehicleId: 0,        description: covenantDescController.text,        name: covenantNameController.text,        custodyImagePath: '',      ));    } else {      SnackBarManager.showErrorSnackBar(context, strings.please_upload_pdf_image);    }  }}