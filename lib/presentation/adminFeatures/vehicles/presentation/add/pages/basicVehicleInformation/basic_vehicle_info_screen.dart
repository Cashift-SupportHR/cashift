import '../../../../../../presentationUser/resources/colors.dart';import '../../../../../../shared/components/index.dart';import '../../../../../../shared/components/picker/projects_picker_stream.dart';import '../../../../../../shared/components/text_field/build_text_field_item.dart';import '../../../../../usersManagement/presentation/addNewUser/widgets/company_picker.dart';import '../../../../data/models/add_vehicle_params.dart';import '../../bloc/basic_vehicle_info_state.dart';class BasicVehicleInformationScreen extends BaseStatelessWidget {  final int vehicleId;  final BasicVehicleInformationState state;  final Function(int id) onFetchProjectsByCompanyId;  final Function(AddVehicleParams) onAdd;  BasicVehicleInformationScreen({    Key? key,    required this.vehicleId,    required this.state,    required this.onFetchProjectsByCompanyId,    required this.onAdd,  }) : super(key: key);  TextEditingController projectController = TextEditingController();  TextEditingController modelController = TextEditingController();  TextEditingController yearOfManufactureController = TextEditingController();  TextEditingController specificationsController = TextEditingController();  int companyId = 0;  int vehicleTypeId = 0;  int projectId = 0;  final _formKey = GlobalKey<FormState>();  @override  Widget build(BuildContext context) {    _initialValues();    return Scaffold(      backgroundColor: kBackground,      bottomNavigationBar: RowButtons(        textSaveButton: strings.next,        onSave: () {          if (_formKey.currentState!.validate()) {            onAddProjectPressed(context);          }        },        onCancel: () {          Navigator.pop(context);        },      ),      body: Form(          key: _formKey,          child: SingleChildScrollView(            padding: const EdgeInsets.all(16),            child: Column(              children: [                vehicleTypePicker(),                companiesPicker(),                projectsPickerStream(),                modelNameTextField(),                yearManufactureTextField(),                descriptionTextField(),              ],            ),          )),    );  }  vehicleTypePicker() {    return BottomSheetTextFieldRectangle(      title: strings.vehicle_type,      hintText: strings.select_vehicle_type,      isScrollControlled: true,      setSearch: true,      initValue: state.initialData?.vehicleBrandName,      items: Item.fromCommonListItem(state.vehiclesTypes),      onSelectItem: (items) async {        vehicleTypeId = items.index;      },    );  }  CompanyPicker companiesPicker() {    return CompanyPicker(      items: state.companies,      initialValue: state.initialData?.companyName,      onSelectItem: (item) {        companyId = item.index;        projectController.clear();        projectId = 0;        onFetchProjectsByCompanyId(companyId);      },    );  }  ProjectsPickerStream projectsPickerStream() {    print('state.projectsStream ${state.initialData?.projectName}');    return ProjectsPickerStream(        projectsStream: state.projectsStream,        projectController: projectController,        onSelectItem: (id) {          projectId = id;        }    );  }  BuildTextFieldItem modelNameTextField() {    return BuildTextFieldItem(      title: strings.model_name,      hintText: strings.type_model_name,      controller: modelController,      keyboardType: TextInputType.name,    );  }  BuildTextFieldItem yearManufactureTextField() {    return BuildTextFieldItem(      title: strings.year_manufacture,      hintText: strings.type_year_manufacture,      controller: yearOfManufactureController,    );;  }  BuildTextFieldItem descriptionTextField() {    return BuildTextFieldItem(      title: strings.vehicle_specifications,      hintText: strings.type_vehicle_specifications_here,      controller: specificationsController,      keyboardType: TextInputType.multiline,      minLines: 5,    );  }  _initialValues() {    if (state.initialData != null) {      vehicleTypeId = state.initialData!.vehicleBrandId ?? 0;      companyId = state.initialData!.companyId ?? 0;      projectId = state.initialData!.projectId ?? 0;      projectController.text = state.initialData!.projectName ?? '';      modelController.text = state.initialData!.model ?? '';      yearOfManufactureController.text = state.initialData!.yearOfManufacture?.toString() ?? '';      specificationsController.text = state.initialData!.specifications ?? '';    }  }  onAddProjectPressed(BuildContext context) {    onAdd(      AddVehicleParams(        // id: vehicleId,        // vehicleCode: vehicleTypeId,        companyId: companyId.toString(),        projectId: projectId.toString(),        model: modelController.text,        yearOfManufacture: yearOfManufactureController.text,        vehicleBrandId: vehicleTypeId.toString(),        specifications: specificationsController.text,      ),    );  }}