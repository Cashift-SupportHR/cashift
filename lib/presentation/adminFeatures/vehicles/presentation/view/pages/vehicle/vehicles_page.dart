import 'package:flutter/cupertino.dart';import 'package:shiftapp/presentation/adminFeatures/vehicles/presentation/view/pages/vehicle/vehicles_screen.dart';import 'package:shiftapp/presentation/shared/components/base_widget_bloc.dart';import 'package:shiftapp/presentation/shared/components/text_field/text_field_search.dart';import '../../../../../../../core/services/routes.dart';import '../../../../../../presentationUser/common/common_state.dart';import '../../../../../../presentationUser/salarydefinitionrequest/requests/widgets/title_and_add_new_request.dart';import '../../../../data/models/vehicles_dto.dart';import '../../../../domain/entities/vehicle.dart';import '../../bloc/vehicles_cubit.dart';class VehiclesPage    extends BaseBlocWidget<Initialized<List<Vehicle>>, VehiclesCubit> {  VehiclesPage({Key? key}) : super(key: key);  @override  String? title(BuildContext context) {    return strings.vehicles;  }  @override  loadInitialData(BuildContext context) {    bloc.fetchVehicles();  }  @override  bool detectRequiredTasks() {    return false;  }  TextEditingController controller = TextEditingController();  @override  Widget build(BuildContext context) {    return mainFrame(      body: Column(        children: [          TitleAndAddNewRequest(            title: strings.vehicles,            textButton: strings.add_vehicles,            onTap: () async {              final isRefresh =                  await Navigator.pushNamed(context, Routes.mainAddVehiclePage);              if (isRefresh == true) {                loadInitialData(context);              }            },          ),          TextFieldSearch(            title:            '${strings.search_for}, ${strings.model}, ${strings.license_number}, ${strings.color}, ${strings.year_crate}',            controller: controller,            margin: EdgeInsets.only(right: 12, left: 12, bottom: 12),            isSuffixIcon: false,            onChanged: (value) {              bloc.searchByText(value);            },          ),          Expanded(child: buildConsumer(context)),        ],      ),    );  }  @override  Widget buildWidget(BuildContext context, Initialized<List<Vehicle>> state) {    return VehiclesScreen(      data: state.data ?? [],      onDelete: (id) => bloc.deleteVehicle(id: id),      onRefresh: () {        loadInitialData(context);      },    );  }  @override  void onSuccessDismissed() {    loadInitialData(context);  }}