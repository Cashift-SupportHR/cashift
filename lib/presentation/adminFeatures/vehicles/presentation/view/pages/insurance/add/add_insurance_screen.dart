import 'dart:io';import 'package:shiftapp/presentation/shared/components/buttons/row_buttons.dart';import 'package:shiftapp/presentation/shared/components/dropdown_filed.dart';import 'package:shiftapp/utils/app_utils.dart';import '../../../../../../../../domain/entities/shared/date_formatter.dart';import '../../../../../../../presentationUser/attendance/facerecognation/index.dart';import '../../../../../../../presentationUser/workHazards/presentation/addWorkHazard/widgets/upload_files_list.dart';import '../../../../../../../shared/components/base_stateless_widget.dart';import '../../../../../../../shared/components/text_field/bottom_sheet_text_field_rectangle.dart';import '../../../../../../../shared/components/text_field/build_text_field_item.dart';import '../../../../../../../shared/components/text_field/date_text_field_picker.dart';import '../../../../../data/models/add_insurance_prams.dart';import '../../../../../data/models/constract_add_insurance.dart';import '../../../../../domain/entities/insurance_types.dart';class AddInsuranceScreen extends BaseStatelessWidget {  final List<InsuranceTypes> insuranceTypesDto;  ConstractAddInsurance constractAddInsurance;  final Function(AddInsurancePrams addInsurancePrams) addInsurance;  AddInsuranceScreen(      {super.key,      required this.insuranceTypesDto,      required this.addInsurance,      required this.constractAddInsurance});  TextEditingController companyNameInsuranceController =      TextEditingController();  TextEditingController numberInsuranceController = TextEditingController();  TextEditingController expireDateController = TextEditingController();  File? files;  String? typeInsurance;  final _formKey = GlobalKey<FormState>();  @override  Widget build(BuildContext context) {    typeInsurance = constractAddInsurance.insurancesDto?.vehicleInsuranceTypeId            .toString() ??        "";    companyNameInsuranceController = TextEditingController(        text: constractAddInsurance.insurancesDto?.insuranceProvider ?? "");    numberInsuranceController = TextEditingController(        text: constractAddInsurance.insurancesDto?.insuranceNumber ?? "");    expireDateController = TextEditingController(        text: DateFormatter.repairApiDateTime(      constractAddInsurance.insurancesDto?.insuranceExpiryDate ?? "",      pattern: DateFormatter.DAY_MONTH_YEAR,      local: 'en',    ));    return Scaffold(      bottomNavigationBar: RowButtons(        onSave: () {          if ((files == null || files!.path.isEmpty) &&              constractAddInsurance.insurancesDto == null) {            AppUtils.showSnackBarError(                strings.please_upload_pdf_image, context);          } else if (_formKey.currentState!.validate()) {            if (constractAddInsurance.insurancesDto == null) {              addInsurance(AddInsurancePrams(                  insuranceExpiryDate: DateFormatter.formatTimeStamp(                      expireDateController.text),                  insuranceImage: files,                  insuranceNumber: numberInsuranceController.text,                  insuranceProvider: companyNameInsuranceController.text,                  vehicleInsuranceTypeId: typeInsurance,                  vehicleId: constractAddInsurance.vehicleId));            } else {              addInsurance(AddInsurancePrams(                  insuranceExpiryDate: DateFormatter.formatTimeStamp(                      expireDateController.text),                  insuranceImage: files,                  insuranceNumber: numberInsuranceController.text,                  insuranceProvider: companyNameInsuranceController.text,                  vehicleInsuranceTypeId: typeInsurance,                  vehicleId: constractAddInsurance.insurancesDto?.vehicleId,                  id: constractAddInsurance.insurancesDto?.id));            }          }        },        onCancel: () {          Navigator.pop(context);        },      ),      body: SingleChildScrollView(        padding: const EdgeInsets.all(15),        child: Form(          key: _formKey,          child: Column(            children: [              BottomSheetTextFieldRectangle(                title: strings.type_insurance,                hintText: strings.select_type_insurance,                isScrollControlled: true,                initValue: constractAddInsurance                        .insurancesDto?.vehicleInsuranceTypeName ??                    "",                setSearch: true,                searchHint: strings.select_type_insurance,                items: insuranceTypesDto                    .map((e) =>                        Item(index: e.id?.toInt() ?? 0, value: e.name ?? ""))                    .toList(),                onSelectItem: (item) async {                  typeInsurance = item.index.toString();                },              ),              BuildTextFieldItem(                title: strings.company_name_insurance,                hintText: strings.write_company_name_insurance,                keyboardType: TextInputType.text,                controller: companyNameInsuranceController,              ),              BuildTextFieldItem(                title: strings.number_insurance,                hintText: strings.write_number_insurance,                controller: numberInsuranceController,              ),              DateTextFieldPicker(                title: strings.expire_date,                hintText: strings.write_expire_date,                controller: expireDateController,                pattern: DateFormatter.DAY_MONTH_YEAR,              ),              UploadFilesOnly(                initialValue:                    constractAddInsurance.insurancesDto?.insuranceImagePath ??                        "",                title: strings.upload_image,                isPdf: false,                onPicker: (filesValue) {                  files = filesValue;                },              ),            ],          ),        ),      ),    );  }}