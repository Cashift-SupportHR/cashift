import 'package:flutter/cupertino.dart';import 'package:flutter/material.dart';import 'package:shiftapp/presentation/adminFeatures/vehicles/data/models/constract_add_insurance.dart';import 'package:shiftapp/presentation/presentationUser/common/common_state.dart';import 'package:shiftapp/presentation/shared/components/base_widget_bloc.dart';import '../../../../../../../../core/services/routes.dart';import '../../../../../../../presentationUser/salarydefinitionrequest/requests/widgets/title_and_add_new_request.dart';import '../../../../../domain/entities/insurances.dart';import '../../../bloc/vehicles_cubit.dart';import 'insurance_screen.dart';class InsurancePage    extends BaseBlocWidget<Initialized<List<Insurances>>, VehiclesCubit> {  InsurancePage({Key? key}) : super(key: key);  @override  void loadInitialData(BuildContext context) {    int vehicleId = getArguments(context);    bloc.fetchInsurancesByVehicleId(vehicleId);  }  @override  String? title(BuildContext context) {    return strings.insurance;  }  @override  Widget build(BuildContext context) {    int vehicleId = getArguments(context);    return mainFrame(      body: Column(        children: [          TitleAndAddNewRequest(            title: strings.insurance,            textButton: strings.add_insurance,            onTap: () async {              final isRefresh = await Navigator.pushNamed(context, Routes.addInsurancePage,                  arguments: ConstractAddInsurance(  vehicleId: vehicleId));              if (isRefresh == true) {                loadInitialData(context);              }            },          ),          Expanded(child: buildConsumer(context)),        ],      ),    );  }  @override  Widget buildWidget(      BuildContext context, Initialized<List<Insurances>> state) {    return InsuranceScreen(      data: state.data??[],      onRefresh: () {        loadInitialData(context);      },      onDelete: (id) {        bloc.deleteInsurance(id: id);      },    );  }  @override  void onSuccessDismissed() {    loadInitialData(context);  }  @override  bool detectRequiredTasks() {    return false;  }}