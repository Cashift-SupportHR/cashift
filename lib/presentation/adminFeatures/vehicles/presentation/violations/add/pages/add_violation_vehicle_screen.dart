import 'dart:io';import 'package:location/location.dart';import 'package:shiftapp/presentation/presentationUser/resources/colors.dart';import 'package:shiftapp/presentation/presentationUser/salarydefinitionrequest/requests/widgets/warning_widget.dart';import '../../../../../../presentationUser/workHazards/presentation/addWorkHazard/widgets/upload_files_list.dart';import '../../../../../../shared/components/index.dart';import '../../../../../../shared/components/text_field/build_text_field_item.dart';import '../../../../../../shared/models/common_list_item.dart';import '../../../../../focusPoints/presentations/add_focus_point/pages/focus_point_data/widgets/current_location.dart';import '../../../../data/models/add_vehicle_violation_params.dart';import '../bloc/add_vehicle_violation_state.dart';class AddVehicleViolationScreen extends BaseStatelessWidget {  final AddVehicleViolationState state;  final Function(AddVehicleViolationParams params, List<File> files) onAddVehicleViolation;  AddVehicleViolationScreen(      {Key? key,      required this.state,      required this.onAddVehicleViolation,      })      : super(key: key);  final _formKey = GlobalKey<FormState>();  TextEditingController companyNameController = TextEditingController();  TextEditingController streetNameController = TextEditingController();  TextEditingController detailsController = TextEditingController();  int? typeId;  double lat = 0.0;  double log = 0.0;  List<File> files = [];  @override  Widget build(BuildContext context) {    _initData();    return Form(      key: _formKey,      child: SingleChildScrollView(        padding: const EdgeInsets.all(16),        child: Column(          crossAxisAlignment: CrossAxisAlignment.start,          mainAxisAlignment: MainAxisAlignment.start,          children: [            typesPicker(context),            companyNameTextField(context),            streetNameTextField(context),            descriptionTextField(context),            UploadFilesList(              initialValueList: state.initialData?.getImages ?? [],              onPicker: (filesValue) {                files = filesValue;              },            ),            warningWidget(),           currentLocation(),            rowButtons(context),          ],        ),      ),    );  }  BottomSheetTextFieldRectangle typesPicker(BuildContext context) {    return BottomSheetTextFieldRectangle(      items: CommonListItem.toItemsListPicker(state.vehicleViolationTypes),      title: strings.type,      hintText: strings.select_type,      initValue: state.initialData?.contractViolationType ?? '',      onSelectItem: (value) {        typeId = value.index;      },    );  }  BuildTextFieldItem companyNameTextField(BuildContext context) {    return BuildTextFieldItem(      title: strings.company_or_factory_name,      hintText: strings.company_or_factory_name,      controller: companyNameController,      keyboardType: TextInputType.text,    );  }  BuildTextFieldItem streetNameTextField(BuildContext context) {    return BuildTextFieldItem(      title: strings.street_name,      hintText: strings.type_street_name,      controller: streetNameController,      keyboardType: TextInputType.text,    );  }  BuildTextFieldItem descriptionTextField(BuildContext context) {    return BuildTextFieldItem(      title: strings.details,      hintText: strings.write_your_notes_here,      controller: detailsController,      keyboardType: TextInputType.multiline,      minLines: 5,    );  }  RowButtons rowButtons(BuildContext context) {    return RowButtons(      onSave: () {        if (_formKey.currentState!.validate()) {          onAddComplaintPressed();        }      },      margin: const EdgeInsets.only(top: 16),      onCancel: () {        Navigator.pop(context);      },    );  }  warningWidget() {    return WarningWidget(      warningText: strings.add_violation_files_desc,      margin: const EdgeInsetsDirectional.only(end: 10, top: 16, bottom: 16),      color: kPrimary,    );  }  CurrentLocation currentLocation() {    return  CurrentLocation(        text: strings.current_location,        initialLocation: state.initialData == null            ? null            :        LocationData.fromMap({          'latitude': state.initialData?.lat ?? 0.0,          'longitude': state.initialData?.lng ?? 0.0,        }),        onGetLocation: (locationData) {          lat = locationData.latitude ?? 0.0;          log = locationData.longitude ?? 0.0;        }    );  }  _initData() {    companyNameController.text = state.initialData?.companyName ?? '';    streetNameController.text = state.initialData?.streetName ?? '';    detailsController.text = state.initialData?.details ?? '';    typeId = state.initialData?.contractViolationTypeId;  }  onAddComplaintPressed() {    onAddVehicleViolation(      AddVehicleViolationParams(        id: state.initialData?.id ?? 0,        contractViolationTypeId: typeId,        companyName: companyNameController.text,        streetName: streetNameController.text,        details: detailsController.text,        lng: log,        lat: lat,      ),      files,    );  }}