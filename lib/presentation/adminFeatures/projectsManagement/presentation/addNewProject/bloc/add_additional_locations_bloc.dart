import 'package:injectable/injectable.dart';import 'package:shiftapp/core/bloc/base_cubit.dart';import '../../../../../presentationUser/common/common_state.dart';import '../../../data/models/index.dart';@Injectable()class AdditionalLocationsCubit extends BaseCubit {  final ProjectsManagementRepository _repository;  AdditionalLocationsCubit(this._repository);  Future<void> fetchInitialData(int? projectId) async {    emit(LoadingState());    try {      final result = await _repository.fetchLocationInfoByProject(projectId);      emit(Initialized<List<LocationProjectParams>>(data: result));    } on Exception catch (e) {      emit(ErrorState(e));    }  }  Future<void> addLocationProject(LocationProjectParams params) async {    emit(LoadingStateListener());    try {      final  message = await _repository.addLocationProject(params);      emit(SuccessStateListener<String>(data: message));      //emit(DismissDialogState());    } catch (e) {      emit(FailureStateListener(e));    }  }  Future<void> editLocationProject(LocationProjectParams params) async {    emit(LoadingStateListener());    try {      final  message = await _repository.editLocationProject(params);      emit(SuccessStateListener<String>(data: message));    } catch (e) {      emit(FailureStateListener(e));    }  }  Future<void> deleteLocationProject(int id) async {    emit(LoadingStateListener());    try {      final message = await _repository.deleteLocationProject(id);      emit(SuccessStateListener<String>(data: message));    } catch (e) {      emit(FailureStateListener(e));    }  }}