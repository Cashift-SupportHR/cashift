import 'package:flutter/cupertino.dart';import 'package:flutter/material.dart';import 'package:shiftapp/presentation/adminFeatures/projectsManagement/presentation/addNewProject/pages/workingPeriodsProject/widgets/add_working_period_button.dart';import 'package:shiftapp/presentation/adminFeatures/projectsManagement/presentation/addNewProject/pages/workingPeriodsProject/working_periods_project_screen.dart';import 'package:shiftapp/presentation/shared/components/base_widget_bloc.dart';import '../../../../../../presentationUser/common/common_state.dart';import '../../../../../../shared/components/buttons/row_buttons.dart';import '../../../../domain/entities/working_period.dart';import '../../bloc/add_working_period_bloc.dart';class WorkingPeriodsProjectPage extends BaseBlocWidget<Initialized<List<WorkingPeriod>>, AddWorkingPeriodCubit> {  final Function()? idCallback;  final Function()? companyIdCallback;  final Function()? onNext;  final Function()? onPrevious;  int? companyId;  WorkingPeriodsProjectPage({Key? key, this.idCallback, this.companyId, this.companyIdCallback, this.onNext, this.onPrevious}) : super(key: key);  @override  void loadInitialData(BuildContext context) {    print('companyIdCallback ${companyIdCallback?.call()}');    PraWorkingPeriod? praWorkingPeriod = getArguments(context);    bloc.fetchWorkingPeriodsByProjectId(getProjectId(praWorkingPeriod));  }  @override  bool initializeByKoin() {    return false;  }  @override  bool detectRequiredTasks() {    return false;  }  @override  String? title(context) {    return idCallback != null ? null : strings.adjust_periods;  }  StreamStateInitial<bool> isEmptyPeriodsStream = StreamStateInitial<bool>();  @override  Widget build(BuildContext context) {    PraWorkingPeriod? praWorkingPeriod = getArguments(context);    return mainFrame(        body: Column(      children: [        AddWorkingPeriodButton(          projectId: getProjectId(praWorkingPeriod),          companyId: getCompanyId(praWorkingPeriod) ?? companyId ?? 0,          onRefresh: () {            loadInitialData(context);          },        ),        Expanded(child: buildConsumer(context)),      ],    ));  }  @override  Widget buildWidget(BuildContext context, Initialized<List<WorkingPeriod>> state) {    print('companyIdCallback ${companyIdCallback?.call()}');    isEmptyPeriodsStream.setData(state.data!.isEmpty);    PraWorkingPeriod? praWorkingPeriod = getArguments(context);    return WorkingPeriodsProjectScreen(        projectId: getProjectId(praWorkingPeriod),        workingPeriods: state.data,        companyId: getCompanyId(praWorkingPeriod) ?? 0,        onAddPeriod: (params) {          params.projectId = getProjectId(praWorkingPeriod);          params.companyId = getCompanyId(praWorkingPeriod);          bloc.addEditWorkingPeriod(params);        },        onDeletePeriod: (id) {          bloc.deleteWorkingPeriod(id);        },        onRefresh: () {          loadInitialData(context);        });  }  @override  Widget? bottomNavigationBar(context) {    return idCallback != null        ? StreamBuilder<bool>(            initialData: true,            stream: isEmptyPeriodsStream.stream,            builder: (context, snapshot) {              print('snapshot.data ${snapshot.data}');              return RowButtons(                textSaveButton: strings.next,                textCancelButton: strings.previous,                onSave: snapshot.data == true                    ? null                    : () {                        onNext!();                      },                onCancel: () {                  onPrevious!();                },              );            })        : null;  }  @override  void onSuccessDataState(projectId) {    print('projectIdonNext $projectId');    if (projectId is int) {      if (onNext != null) {        onNext!();      }    }  }  @override  void onSuccessDismissed() {    loadInitialData(context);  }  int getProjectId(PraWorkingPeriod? praWorkingPeriod) {    return (praWorkingPeriod?.idProject ?? idCallback?.call()) as int;  }  int? getCompanyId(PraWorkingPeriod? praWorkingPeriod) {    return praWorkingPeriod?.idCompany ?? companyIdCallback?.call();  }}class PraWorkingPeriod {  int? idProject;  int? idCompany;  PraWorkingPeriod({required this.idProject, required this.idCompany});}