import 'package:shiftapp/presentation/adminFeatures/projectsManagement/domain/entities/pricing_details.dart';import 'package:shiftapp/presentation/adminFeatures/projectsManagement/presentation/addNewProject/pages/periodPricing/widget/prices_previous_stream.dart';import 'package:shiftapp/presentation/adminFeatures/projectsManagement/presentation/addNewProject/pages/periodPricing/widget/seasons_picker.dart';import 'package:shiftapp/presentation/presentationUser/common/common_state.dart';import 'package:shiftapp/presentation/shared/components/dropdown_filed.dart';import '../../../../../../../shared/components/base_stateless_widget.dart';import '../../../../../../../shared/components/buttons/row_buttons.dart';import '../../../../../../../shared/components/radio/radio_grid_list.dart';import '../../../../../../../shared/components/stepper/easy_step.dart';import '../../../../../../../shared/components/text_field/bottom_sheet_text_field_rectangle.dart';import '../../../../../../../shared/components/text_field/build_text_field_item.dart';import '../../../../../data/models/add_period_pricing_params.dart';import '../../../../../domain/entities/job.dart';import '../../../../../domain/entities/last_price.dart';import '../../../../../domain/entities/period_pricing_label.dart';import '../../../../../domain/entities/shift_time.dart';import '../../../../../domain/entities/time.dart';import '../../workingPeriodsProject/widgets/jobs_picker.dart';class AddPeriodPricingSheet extends BaseStatelessWidget {  final PeriodPricingLabel pricingLabel;  final List<ShiftTime> shiftTime;  final List<TimePrice> timePrice;  final PricingDetails? dataDetails;  final Function(AddPeriodPricingParams addPeriodPricingParams) onSaveData;  final List<Job> job;  final int projectId;  Function(int idShift, int idProject) LoadingLastPricing;  final StreamStateInitial<List<LastPrice>?> pricesPreviousStream;  AddPeriodPricingSheet({    required this.pricingLabel,    required this.shiftTime,    required this.timePrice,    required this.job,    required this.LoadingLastPricing,    required this.projectId,    required this.onSaveData,    required this.pricesPreviousStream,    this.dataDetails,    Key? key,  }) : super(key: key);  TextEditingController valuePricingController = TextEditingController();  TextEditingController startDateController = TextEditingController();  TextEditingController endDateController = TextEditingController();  TextEditingController shiftController = TextEditingController();  int? idShift;  int? idJob;  int? salary;  int? seasonseId;  bool setAsDefault = true;  bool isAllowEditPrice = false;  final _formKey = GlobalKey<FormState>();  @override  Widget build(BuildContext context) {    valuePricingController.text = dataDetails?.salary?.toString() ?? "";    idShift = dataDetails?.shiftId ?? 0;    seasonseId = dataDetails?.seasonseId ?? 0;    startDateController.text = dataDetails?.fromDay?.toString() ?? "";    endDateController.text = dataDetails?.toDay?.toString() ?? "";    setAsDefault = dataDetails?.setAsDefault ?? true;    isAllowEditPrice = dataDetails?.isAllowEditPrice ?? false;    idJob = dataDetails?.jobId ?? 0;    return Container(      color: Colors.white,      child: SingleChildScrollView(        child: Form(          key: _formKey,          child: Column(            children: [              shiftWidget(),              rosaceaWidget(),              pricingValue(),              dateWidget(context),              radioButtonWidget(),              SizedBox(                height: 20,              ),              buttonWidget(context),              PricesPreviousStream(pricesPreviousStream: pricesPreviousStream),            ],          ),        ),      ),    );  }  onPressed1() {    if (_formKey.currentState!.validate()) {      print("onPressed1 $isAllowEditPrice");      onSaveData(AddPeriodPricingParams(          id: dataDetails?.id ?? 0,          fromDay: int.parse(startDateController.text),          toDay: int.parse(endDateController.text),          isAllowEditPrice: isAllowEditPrice,          jobId: idJob,          projectId: projectId,          salary: double.parse(valuePricingController.text).toInt(),          seasonseId: seasonseId,          setAsDefault: setAsDefault,          shiftId: idShift));    }  }  buttonWidget(context) {    return RowButtons(      textCancelButton: strings.dont_save,      radius: 25,      margin: EdgeInsetsDirectional.symmetric(horizontal: 30, vertical: 20),      onSave: () {        onPressed1();      },      onCancel: () {        Navigator.pop(context);      },    );  }  pricingValue() {    return BuildTextFieldItem(      title: pricingLabel.salary,      hintText: pricingLabel.hintSalary,      keyboardType: TextInputType.number,      controller: valuePricingController,      validator: (value) {        if (value!.isEmpty) {          return strings.write_value_pricing;        }        return null;      },    );  }  dateWidget(context) {    return Row(      children: [        Expanded(          child: BuildTextFieldItem(            title: pricingLabel.fromDay,            maxLength: 2,            keyboardType: TextInputType.number,            hintText: "   ${pricingLabel.hintFromDay}  ",            controller: startDateController,            validator: (value) {              if (value!.isEmpty) {                return pricingLabel.hintFromDay;              } else if (int.parse(value) > 31) {                return strings.validation_day;              }              return null;            },          ),        ),        SizedBox(          width: 15,        ),        Expanded(          child: BuildTextFieldItem(            title: pricingLabel.toDay,            hintText: "   ${pricingLabel.hintToDay}  ",            maxLength: 2,            keyboardType: TextInputType.number,            controller: endDateController,            validator: (value) {              if (value!.isEmpty) {                return pricingLabel.hintToDay ?? '';              } else if (int.parse(value) > 31) {                return strings.validation_day;              }              return null;            },          ),        ),      ],    );  } //  List<TimePrice> timePrice;  rosaceaWidget() {    return SeasonsPicker(      title: pricingLabel.seasonseName,      hintText: pricingLabel.hintSeasonseName,      items: timePrice,      initialValue: dataDetails?.seasonseName ?? '',      onSelectItem: (items) async {        print(items);        seasonseId = items.index;      },    );  }  shiftWidget() {    return BottomSheetTextFieldRectangle(      title: pricingLabel.shiftName,      hintText: pricingLabel.hintShiftName,      initValue: dataDetails?.shiftName ?? '',      isScrollControlled: true,      setSearch: true,      controller: shiftController,      items: shiftTime          .map((e) => Item(              index: e.id ?? 0,              description: e.jobId.toString(),              value: e.name.toString()))          .toList(),      onSelectItem: (items) async {        print(items);        idShift = items.index;        shiftController.text = items.value;        idJob = int.parse(items.description.toString());        LoadingLastPricing(items.index, projectId);      },    );  }  radioButtonWidget() {    return RadioGridList(      color: Colors.black,      items: [        RadioItem(          title: pricingLabel.setAsDefault ?? '',          value: 0.toString(),        ),        RadioItem(          title: pricingLabel.isAllowEditPrice ?? '',          value: 1.toString(),        ),      ],      groupValue: isAllowEditPrice == true ? '1' : '0',      onChanged: (value) {        print(value);        if (value.value == "0") {          setAsDefault == true;          isAllowEditPrice = false;        } else if (value.value == "1") {          print("onChanged $isAllowEditPrice");          setAsDefault == false;          isAllowEditPrice = true;        }        print(value.value);        print("jkklkkl");      },    );  }}