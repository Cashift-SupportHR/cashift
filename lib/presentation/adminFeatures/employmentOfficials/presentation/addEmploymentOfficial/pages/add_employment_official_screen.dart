import 'package:flutter/material.dart';import 'package:google_maps_flutter/google_maps_flutter.dart';import 'package:shiftapp/extensions/extensions.dart';import 'package:shiftapp/presentation/adminFeatures/projectsManagement/presentation/addNewProject/pages/addProject/widgets/cities_picker.dart';import 'package:shiftapp/presentation/presentationUser/map_picker/widgets/map_picker_item.dart';import '../../../../../../utils/app_icons.dart';import '../../../../../../utils/app_utils.dart';import '../../../../../presentationUser/resources/validation.dart';import '../../../../../shared/components/base_stateless_widget.dart';import '../../../../../shared/components/buttons/row_buttons.dart';import '../../../../../shared/components/map/map_picker.dart';import '../../../../../shared/components/text_field/build_text_field_item.dart';import '../../../../projectsManagement/domain/entities/city.dart';import '../../../data/models/add_employment_official_params.dart';import '../../../domain/entities/employment_official.dart';class AddEmploymentOfficialScreen extends BaseStatelessWidget {  final List<City> cities;  final EmploymentOfficial? initialData;  final Function(AddEmploymentOfficialParams params) onAddEmploymentOfficial;  AddEmploymentOfficialScreen({    Key? key,    required this.cities,    this.initialData,    required this.onAddEmploymentOfficial,  }) : super(key: key);  TextEditingController employeeNameController = TextEditingController();  TextEditingController mobileNumberController = TextEditingController();  TextEditingController emailController = TextEditingController();  TextEditingController addressController = TextEditingController();  TextEditingController timesWorkController = TextEditingController();  TextEditingController workDaysController = TextEditingController();  TextEditingController notesArController = TextEditingController();  TextEditingController notesEnController = TextEditingController();  TextEditingController locationController = TextEditingController();  LatLng? location;  int cityId = 0;  final _formKey = GlobalKey<FormState>();  @override  Widget build(BuildContext context) {    _initialValues();    return Scaffold(      bottomNavigationBar: RowButtons(        onSave: () {          if (_formKey.currentState!.validate()) {            onAddNewUserPressed(context);          }        },        onCancel: () {          Navigator.pop(context);        },      ),      body: Form(          key: _formKey,          child: SingleChildScrollView(            padding: const EdgeInsets.all(16),            child: Column(              children: [                CitiesPicker(                  initialValue: initialData?.cityName,                  items: cities,                  onSelectItem: (value) {                    cityId = value.index;                  },                ),                BuildTextFieldItem(                  title: strings.manager_name,                  hintText: strings.type_manager_name,                  keyboardType: TextInputType.name,                  controller: employeeNameController,                ),                BuildTextFieldItem(                  title: strings.mobile_number,                  hintText: strings.write_user_mobile_number,                  controller: mobileNumberController,                  validator: (value) {                    if (value!.isNullOrEmpty()) {                      return strings.please_entry_phone;                    } else if (!Validation.isValidPhone(                        AppUtils.replaceArabicNumber(value))) {                      return strings.invalid_phone;                    }                    return null;                  },                ),                BuildTextFieldItem(                  title: strings.email,                  hintText: strings.write_email,                  keyboardType: TextInputType.emailAddress,                  controller: emailController,                  validator: (value) {                    if (value!.isNullOrEmpty()) {                      return strings.please_entry_email;                    } else if (!Validation.isEmailValid(                        AppUtils.replaceArabicNumber(value))) {                      return strings.invalid_email;                    }                    return null;                  },                ),                BuildTextFieldItem(                  title: strings.address,                  hintText: strings.write_address,                  keyboardType: TextInputType.visiblePassword,                  controller: addressController,                ),                BuildTextFieldItem(                  title: strings.shift_hours,                  hintText: strings.determine_shift_hours,                  keyboardType: TextInputType.visiblePassword,                  controller: timesWorkController,                ),                BuildTextFieldItem(                  title: strings.workdays,                  hintText: strings.write_working_days,                  keyboardType: TextInputType.visiblePassword,                  controller: workDaysController,                ),                BuildTextFieldItem(                  title: strings.add_notes_in_arabic,                  hintText: strings.write_note,                  keyboardType: TextInputType.visiblePassword,                  controller: notesArController,                  validator: (value) {                    if (value.isNullOrEmpty()) {                      return strings.this_field_is_required;                    } else if (!Validation.isArabicLettersWithNumbers(                        value ?? '')) {                      return strings.must_be_arabic_letters;                    }                    return null;                  },                ),                BuildTextFieldItem(                  title: strings.add_notes_in_english,                  hintText: strings.write_note,                  keyboardType: TextInputType.visiblePassword,                  controller: notesEnController,                  validator: (value) {                    if (value.isNullOrEmpty()) {                      return strings.this_field_is_required;                    } else if (!Validation.isEnglishLettersWithNumbers(                        value ?? '')) {                      return strings.must_be_english_letters;                    }                    return null;                  },                ),                BuildTextFieldItem(                  title: strings.main_location,                  hintText: strings.location_name,                  keyboardType: TextInputType.name,                  controller: locationController,                  onTap: () {},                  showCustomEndIcon: true,                  endIcon: AppIcons.locationPickerOutline,                  onTapEndIcon: () {                   onMapPicker(context);                  },                ),                // CurrentLocation(                //   initialLocation: locationData,                //   text: strings.add_employment_location,                //   onGetLocation: (value) {                //     locationData = value;                //   },                // )              ],            ),          )),    );  }  _initialValues() {    if (initialData != null) {      cityId = initialData!.cityId ?? 0;      employeeNameController.text = initialData!.name ?? '';      mobileNumberController.text = initialData!.phone ?? '';      emailController.text = initialData!.email ?? '';      addressController.text = initialData!.address ?? '';      timesWorkController.text = initialData!.timesOfWork ?? '';      workDaysController.text = initialData!.workDays ?? '';      notesArController.text = initialData!.descriptionAr ?? '';      notesEnController.text = initialData!.descriptionEn ?? '';      locationController.text = '${initialData!.latitude}, ${initialData!.longitude}';      location = LatLng(        double.parse(initialData!.latitude ?? '0.0'),        double.parse(initialData!.longitude ?? '0.0'),      );    }  }  onAddNewUserPressed(BuildContext context) {    onAddEmploymentOfficial(      AddEmploymentOfficialParams(        id: initialData?.id,        cityId: cityId,        name: employeeNameController.text,        email: emailController.text,        phone: mobileNumberController.text,        address: addressController.text,        timesOfWork: timesWorkController.text,        workDays: workDaysController.text,        descriptionAr: notesArController.text,        descriptionEn: notesEnController.text,        latitude: location?.latitude?.toString() ?? '0.0',        longtude: location?.longitude?.toString() ?? '0.0',      ),    );  }  onMapPicker(BuildContext context) async {    MapPickerItem result = await navigatorMapPicker(context);    locationController.text = result.formattedAddress ?? '';    final latitude =  result.geometry?.location?.lat??0.0;    final longitude=  result.geometry?.location?.lng??0.0;    location = LatLng(latitude, longitude);  }}