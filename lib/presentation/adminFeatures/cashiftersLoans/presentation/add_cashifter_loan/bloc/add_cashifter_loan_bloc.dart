import 'package:injectable/injectable.dart';import 'package:shiftapp/core/bloc/base_cubit.dart';import 'package:shiftapp/presentation/presentationUser/common/common_state.dart';import '../../../../../shared/models/common_list_item_dto.dart';import '../../../../projectsManagement/data/repositories/projects_management_repository.dart'; import '../../../data/models/add_cashifter_loan_params.dart';import '../../../data/repositories/cashifters_loans_repository.dart';import 'add_cashifter_loan_state.dart';@Injectable()class AddCashifterLoanCubit extends BaseCubit {   final CashiftersLoansRepository _repository;   final ProjectsManagementRepository _repositoryProject;   AddCashifterLoanCubit(this._repository, this._repositoryProject);   StreamStateInitial<List<CommonListItemDto>> cashiftersStream = StreamStateInitial<List<CommonListItemDto>>();   addNewLoanRequest(AddCashifterLoanParams params) async {      executeEmitterListener(() => _repository.addCashifterLoan(params));   }   fetchInitialData() {      executeBuilder(() => _repositoryProject.fetchCompanies(), onSuccess: (companies) async {         final loansTypes = await _repository.fetchCashifterLoanTypes();          final discountPercentages = await _repository.fetchDiscountPercentages();          final cashiftLoanTermsAndConditions = await _repository.fetchCashiftLoanTermsAndConditions();          emit(AddCashifterLoanState(              companies: companies,              cashiftersStream: cashiftersStream,              loansTypes: loansTypes,              discountPercentages: discountPercentages,              cashiftLoanTermsAndConditions: cashiftLoanTermsAndConditions          ));      });   }   fetchCashifters(int companyId) async{     try{       final response = await _repository.fetchCashifters(companyId);       cashiftersStream.setData(response);      }catch(e){       cashiftersStream.setError(e);     }   }}