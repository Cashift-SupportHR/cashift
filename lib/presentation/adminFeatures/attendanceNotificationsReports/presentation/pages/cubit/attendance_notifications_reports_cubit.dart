import 'package:injectable/injectable.dart';import 'package:shiftapp/core/bloc/base_cubit.dart';import '../../../../../presentationUser/common/common_state.dart'; import '../../../../employees/data/repositories/employees_repository.dart'; import '../../../../employees/domain/entities/shift_employee.dart';import '../../../data/models/emp_attendance_rports_prams.dart';import '../../../data/repositories/attendance_notifications_reports_repository.dart';import '../../../domain/entities/EmpAttendanceRportsDto.dart';@Injectable()class AttendanceNotificationsReportsCubit extends BaseCubit {  final AttendanceNotificationsReportsRepository _repository;  final EmployeesRepository employeesRepository;  AttendanceNotificationsReportsCubit(    this._repository,    this.employeesRepository,  );  StreamStateInitial<List<ShiftEmployee>?> shiftsStream = StreamStateInitial();  StreamStateInitial<EmpAttendanceRports?> empReportStream =      StreamStateInitial();  fetchLoadData( ) {    emit(Initialized<EmpAttendanceRports?>(data: null));  }  EmpAttendanceRports? empAttendanceRports;  fetchAttendanceNotificationsReports(      {required EmpAttendanceRportsPrams empAttendanceRportsPrams}) {    executeBuilder(      () => _repository.fetchAttendanceNotificationsReports(          empAttendanceRportsPrams: empAttendanceRportsPrams),      onSuccess: (value) {        empAttendanceRports = EmpAttendanceRports.fromDto(value);        emit(Initialized<EmpAttendanceRports?>(data: empAttendanceRports));      },    );  }  // fetchAttendanceNotificationsReports(  //     {required EmpAttendanceRportsPrams empAttendanceRportsPrams}) async {  //   try {  //     emit(LoadingState());  //     empReportStream.setData(null);  //     final response = await _repository.fetchAttendanceNotificationsReports(  //         empAttendanceRportsPrams: empAttendanceRportsPrams);  //     EmpAttendanceRports data = EmpAttendanceRports.fromDto(response);  //     empReportStream.setData(data);  //     emit(Initialized<EmpAttendanceRports?>(data: data));  //   } catch (erorr) {  //     shiftsStream.setError(erorr);  //   }  // }}