import 'package:injectable/injectable.dart';import 'package:shiftapp/core/bloc/base_cubit.dart';import '../../../../../presentationUser/common/common_state.dart'; import '../../../../employees/data/repositories/employees_repository.dart';import '../../../../employees/domain/entities/project_employee.dart';import '../../../../employees/domain/entities/shift_employee.dart'; import '../../../domain/entities/EmpAttendanceRportsDto.dart';@Injectable()class FilterAttendanceNotificationsReportsCubit extends BaseCubit {   final EmployeesRepository employeesRepository;   FilterAttendanceNotificationsReportsCubit(     this.employeesRepository,  );  StreamStateInitial<List<ShiftEmployee>?> shiftsStream = StreamStateInitial();  StreamStateInitial<EmpAttendanceRports?> empReportStream =      StreamStateInitial();  List<ProjectEmployee> projects = [];  fetchProject() {    executeBuilder(      () => employeesRepository.fetchProject(),      onSuccess: (value) {        projects = value.map((e) => ProjectEmployee.fromDto(e)).toList();        emit(Initialized<List<ProjectEmployee>>(data: projects));      },    );  }  fetchShiftsByProjects({required int projectId}) async {    try {      final response =          await employeesRepository.fetchShiftsByProjects(projectId);      List<ShiftEmployee> shifts =          response.map((e) => ShiftEmployee.fromDto(e)).toList();      shiftsStream.setData(shifts);    } catch (erorr) {      shiftsStream.setError(erorr);    }  }}