import 'package:flutter/cupertino.dart';import 'package:flutter/material.dart';import 'package:shiftapp/presentation/shared/components/base_widget_bloc.dart';import '../../../../../../core/services/routes.dart';import '../../../../../presentationUser/common/common_state.dart';import '../../../domain/entities/user_management.dart';import '../bloc/add_new_user_bloc.dart';import 'add_new_user_screen.dart';class AddNewUserPage    extends BaseBlocWidget<InitializedAddNewUser, AddNewUserCubit> {  AddNewUserPage({Key? key}) : super(key: key);  static push(BuildContext context,      {required Function() onSuccess, UserManagement? userInfo}) async {    final result = await Navigator.pushNamed(context, Routes.addNewUserPage,        arguments: userInfo);    if (result is bool && result) {      print('push: $result');      onSuccess();    }  }  @override  bool detectRequiredTasks() {    return false;  }  @override  void loadInitialData(BuildContext context) {    UserManagement? initialData = getArguments(context);    bloc.fetchAllaData(initialData?.phoneNumber);  }  @override  bool initializeByKoin() {    return false;  }  @override  String? title(BuildContext context) {    return getArguments(context) == null        ? strings.add_new_user        : strings.edit_user_profile;  }  @override  Widget buildWidget(BuildContext context, InitializedAddNewUser state) {    UserManagement? initialData = getArguments(context);    print('initialData: ${initialData.toString()}');    return AddNewUserScreen(      state: state,      userByPhoneStream: bloc.userByPhoneStream,      initialData: initialData,      shiftsStream: bloc.shiftsStream,      onFetchShifts: (projectId) {        bloc.fetchShiftByListProjectId(projectId);      },      onFetchBrands: (companyId) {        bloc.fetchBrandsByCompanyId(companyId);      },      onFetchProjects: (companyId) {        bloc.fetchListProjectsByCompanyId(companyId);      },      projectsStream: bloc.projectsStream,      brandsStream: bloc.brandsStream,      onAddNewUser: (params) {        params.id = initialData?.id;        bloc.addNewUser(params);      },      onFetchDataUserByPhone: (data) {        bloc.fetchEmpByPhone(data);      },    );  }  @override  void onSuccessDismissed() {    Navigator.pop(context, true);  }}