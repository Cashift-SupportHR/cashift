import 'package:shiftapp/extensions/extensions.dart';import 'package:shiftapp/presentation/presentationUser/common/stream_data_state.dart';import '../../../../../../utils/app_utils.dart';import '../../../../../presentationUser/common/common_state.dart';import '../../../../../presentationUser/resources/validation.dart';import '../../../../../shared/components/index.dart';import '../../../../../shared/models/common_list_item.dart';import '../../../../../shared/components/text_field/build_text_field_item.dart';import '../../../../focusPoints/domain/entities/shifts_by_project.dart';import '../../../data/models/add_new_user_params.dart';import '../../../data/models/user_by_phone_dto.dart';import '../../../domain/entities/index.dart';import '../widgets/add_user_permissions.dart';class AddNewUserScreen extends BaseStatelessWidget {  final InitializedAddNewUser state;  final UserManagement? initialData;  final Function(int) onFetchShifts;  final Function(int) onFetchBrands;  final Function(int) onFetchProjects;  final Function(String) onFetchDataUserByPhone;  final StreamStateInitial<List<ShiftsByProject>?> shiftsStream;  final StreamStateInitial<List<CommonListItem>?> projectsStream;  final StreamDataStateInitial<UserByPhoneDto?> userByPhoneStream;  final StreamStateInitial<List<Brand>?> brandsStream;  final Function(AddNewUserParams) onAddNewUser;  AddNewUserScreen({    Key? key,    required this.state,    this.initialData,    required this.onFetchShifts,    required this.userByPhoneStream,    required this.onFetchDataUserByPhone,    required this.onFetchBrands,    required this.onFetchProjects,    required this.shiftsStream,    required this.projectsStream,    required this.brandsStream,    required this.onAddNewUser,  }) : super(key: key);  TextEditingController tripleUsernameController = TextEditingController();  TextEditingController userAccountController = TextEditingController();  TextEditingController mobileNumberController = TextEditingController();  TextEditingController serchController = TextEditingController();  final _formKey = GlobalKey<FormState>();  AddNewUserParams addNewUserParams = AddNewUserParams();  @override  Widget build(BuildContext context) {    InfoUserManager initialTexts = state.infoUserManager;    _initialValues();    return Scaffold(      body: Form(          key: _formKey,          child: SingleChildScrollView(            padding: const EdgeInsets.all(16),            child: Column(              children: [                BuildTextFieldItem(                  title: strings.search_by_phone_employee,                  hintText: strings.search_by_phone_employee,                  controller: serchController,                  validator: (value) {                    return null;                  },                  suffixWidget: InkWell(                    onTap: () {                      onFetchDataUserByPhone(serchController.text);                    },                    child: Icon(Icons.search),                  ),                ),                StreamDataStateWidget <UserByPhoneDto?>(                    stream: userByPhoneStream,                    builder: (context, snapshot) {                      tripleUsernameController=TextEditingController(text: snapshot?.name??"");                      userAccountController=TextEditingController(text: snapshot?.email??"");                      mobileNumberController =TextEditingController(text: snapshot?.phoneNumber??"");                      return  Column(                              children: [                                BuildTextFieldItem(                                  title: initialTexts.name ?? '',                                  hintText: initialTexts.namePlaceHolder ?? '',                                  keyboardType: TextInputType.name,                                  controller: tripleUsernameController,                                  readOnly: true,                                  validator: (value) {                                    if (value!.isNullOrEmpty()) {                                      return strings.invalid_name;                                    } else if (!Validation.isFullName(value)) {                                      return strings                                          .please_entry_valid_fullName;                                    }                                    return null;                                  },                                ),                                const SizedBox(                                  height: 10,                                ),                                BuildTextFieldItem(                                  title: initialTexts.userName ?? '',                                  hintText:                                      initialTexts.userNamePlaceHolder ?? '',                                  keyboardType: TextInputType.emailAddress,                                  controller: userAccountController,                                  readOnly: true,                                  validator: (value) {                                    if (value!.isNullOrEmpty()) {                                      return strings.please_entry_email;                                    } else if (!Validation.isEmailValid(                                        AppUtils.replaceArabicNumber(value))) {                                      return strings.invalid_email;                                    }                                    return null;                                  },                                ),                                const SizedBox(                                  height: 10,                                ),                                BuildTextFieldItem(                                  title: initialTexts.phone ?? '',                                  hintText: initialTexts.phonePlaceHolder ?? '',                                  controller: mobileNumberController,                                  readOnly: true,                                ),                                // const SizedBox(                                //   height: 10,                                // ),                                // if (initialData?.id == null) ...[                                //   BuildTextFieldItem(                                //     title: initialTexts.password ?? '',                                //     hintText: initialTexts.passwordPlaceHolder ?? '',                                //     isPassword: true,                                //     keyboardType: TextInputType.visiblePassword,                                //     controller: userPasswordController,                                //   ),                                //   const SizedBox(                                //     height: 10,                                //   ),                                //   BuildTextFieldItem(                                //     title: initialTexts.confirmPassword ?? '',                                //     hintText: initialTexts.confirmPasswordPlaceHolder ?? '',                                //     isPassword: true,                                //     keyboardType: TextInputType.visiblePassword,                                //     controller: userConfirmPasswordController,                                //   ),                                // ],                                const SizedBox(                                  height: 10,                                ),                                AddUserPermissions(                                  state: state,                                  initialData: initialData,                                  shiftsStream: shiftsStream,                                  projectsStream: projectsStream,                                  brandsStream: brandsStream,                                  onFetchShifts: onFetchShifts,                                  onFetchBrands: onFetchBrands,                                  onFetchProjects: onFetchProjects,                                  onChanged: (value) {                                    addNewUserParams = value;                                  },                                ),                                SizedBox(                                  height: 20,                                ),                                RowButtons(                                  onSave: () {                                    if (_formKey.currentState!.validate()) {                                      onAddNewUserPressed(context);                                    }                                  },                                  onCancel: () {                                    Navigator.pop(context);                                  },                                ),                              ],                            );                    }),              ],            ),          )),    );  }  _initialValues() {    serchController.text = initialData?.phoneNumber ?? '';    tripleUsernameController.text = initialData?.name ?? '';    userAccountController.text = initialData?.email ?? '';    mobileNumberController.text = initialData?.phoneNumber ?? '';  }  onAddNewUserPressed(BuildContext context) {    if ((addNewUserParams.roleId == null || addNewUserParams.roleId!.isEmpty) &&        initialData?.role?.roleId == null) {      SnackBarManager.showErrorSnackBar(          context, strings.please_select_permission);    } else {      onAddNewUser(        AddNewUserParams(          phoneNumber: mobileNumberController.text,          roleId: addNewUserParams.roleId ?? initialData?.role?.roleId ?? '',          level: addNewUserParams.level ?? initialData?.level,          companyId: addNewUserParams.companyId ?? initialData?.companyId??0,          listBrand: addNewUserParams.listBrand ??              initialData?.brands?.map((e) => e.id ?? 0).toList() ??              [],          listProjects: addNewUserParams.listProjects ??              initialData?.projects?.map((e) => e.id ?? 0).toList() ??              [],          listShifts: addNewUserParams.listShifts ??              initialData?.shifts?.map((e) => e.id ?? 0).toList() ??              [],          listArea: addNewUserParams.listArea ??              initialData?.areas?.map((e) => e.id ?? '').toList() ??              [],        ),      );    }  }}