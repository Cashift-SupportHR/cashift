import 'package:flutter/material.dart';import 'package:shiftapp/extensions/extensions.dart';import 'package:shiftapp/presentation/shared/components/dropdown_filed.dart';import '../../../../../utils/app_utils.dart';import '../../../../presentationUser/common/common_state.dart';import '../../../../presentationUser/resources/validation.dart';import '../../../../shared/components/app_cupertino_button.dart';import '../../../../shared/components/base_widget_bloc.dart';import '../../../../shared/components/text_field/bottom_sheet_text_field_rectangle.dart';import '../../../../shared/components/text_field/build_text_field_item.dart';import '../../data/models/add_edit_job_contaion_prams.dart';import '../../domain/entities/JobModel.dart';import '../../domain/entities/JobRequirements.dart';import '../bloc/job_requirements_cubit.dart';class AddRequirementsBuilder extends BaseBlocWidget<Initialized<List<JobModel>>, JobRequirementsCubit> {  TextEditingController jobRequirementsArController = TextEditingController();  TextEditingController jobRequirementsEnController = TextEditingController();  TextEditingController jobController = TextEditingController();  JobRequirements? jobRequirements;  @override  void loadInitialData(BuildContext context) {    bloc.fetchJob(type: type);  }  @override  bool detectRequiredTasks() {    return false;  }  final _formKey = GlobalKey<FormState>();  int? id;  int? idJob;  final int type;  final Function() onRefresh;  AddRequirementsBuilder({required this.type, this.jobRequirements, required this.onRefresh});  @override  Widget buildWidget(BuildContext context, Initialized<List<JobModel>> state) {    jobRequirementsArController = TextEditingController(text: jobRequirements?.descriptionAr ?? '');    jobRequirementsEnController = TextEditingController(text: jobRequirements?.descriptionEn ?? '');    jobController = TextEditingController(text: jobRequirements?.jobName ?? '');    id = jobRequirements?.id ?? 0;    idJob = jobRequirements?.jobId ?? null;    return Form(      key: _formKey,      child: Scaffold(        bottomNavigationBar: Padding(          padding: const EdgeInsets.only(bottom: 10),          child: AppCupertinoButton(            text: jobRequirements != null ? strings.edit : strings.save_button,            radius: BorderRadius.circular(8),            onPressed: () async {              if (_formKey.currentState!.validate()) {                bloc.addEditJobRequirements(                    addEditJobContaionPrams:                        AddEditJobContaionPrams(id: id, descriptionAr: jobRequirementsArController.text, descriptionEn: jobRequirementsEnController.text, jobId: idJob),                    type: type);              }            },          ),        ),        body: SingleChildScrollView(            child: Column(          children: [            BottomSheetTextFieldRectangle(              title: strings.occupation,              hintText: strings.select_occupation,              isScrollControlled: true,              controller: jobController,              initValue: jobController.text,              setSearch: true,              searchHint: strings.search_occupation,              items: state.data.map((e) => Item(index: e.id ?? 0, value: e.jobName ?? '')).toList(),              onSelectItem: (items) {                idJob = items.index;              },            ),            BuildTextFieldItem(              title: strings.writing_terms_conditions_ar,              controller: jobRequirementsArController,              keyboardType: TextInputType.text,              hintText: strings.write_terms_conditions_ar,              validator: (value) => validateArabicText(value ?? ''),              minLines: 3,            ),            BuildTextFieldItem(              title: strings.writing_terms_conditions_en,              keyboardType: TextInputType.text,              controller: jobRequirementsEnController,              hintText: strings.write_terms_conditions_en,              validator: (value) => validateEnglishText(value ?? ''),              minLines: 3,            ),          ],        )),      ),    );  }  validateArabicText(String value) {    if (value.isNullOrEmpty()) {      return strings.this_field_is_required;    } else if (!Validation.isArabicLettersWithNumbers(value)) {      return strings.must_be_arabic_letters;    }    return null;  }  validateEnglishText(String value) {    if (value.isNullOrEmpty()) {      return strings.this_field_is_required;    } else if (!Validation.isEnglishLettersWithNumbers(value)) {      return strings.must_be_english_letters;    }    return null;  }  @override  void onSuccessDismissed() {    onRefresh();    Navigator.pop(context, true);  }}