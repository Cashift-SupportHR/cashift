import 'package:flutter_svg/flutter_svg.dart';import 'package:shiftapp/presentation/presentationUser/resources/colors.dart';import 'package:shiftapp/presentation/presentationUser/resources/constants.dart';import '../../../../../utils/app_icons.dart';import '../../../../shared/components/index.dart';import '../../../available_opportunities/presentation/widgets/build_popup_menu_button.dart';import '../../domain/entities/index.dart';import '../pages/add_job_requirements_builder.dart';class ListJobReqItemWidget extends BaseStatelessWidget {  final List<JobRequirements> jobRequirements;  final Function() onRefresh;  List<JobModel> job;  final int type;  final Function(int id) onDelete;  Function(int id) updateType;  ListJobReqItemWidget({    required this.jobRequirements,    required this.onRefresh,    required this.onDelete,    required this.job,    required this.type,    required this.updateType,  });  @override  Widget build(BuildContext context) {    return ListView.builder(        shrinkWrap: true,        itemCount: jobRequirements.length,        itemBuilder: (context, index) {          return Container(            margin: EdgeInsets.only(bottom: 10, left: 10, right: 10),            padding: EdgeInsets.only(bottom: 10, left: 10, right: 10),            decoration: Decorations.shapeDecoration(radius: 15),            child: Stack(              children: [                Container(),                Positioned(                    right: 10,                    top: -1,                    child: Padding(                      padding: const EdgeInsets.only(bottom: 20),                      child: Stack(                        alignment: Alignment.center,                        children: [                          SvgPicture.asset(AppIcons.marker, height: 30, width: 20),                          Padding(                            padding: const EdgeInsets.only(bottom: 5),                            child: Text(                              jobRequirements[index].id.toString(),                              style: kTextRegular.copyWith(color: kWhite, fontSize: 10),                            ),                          ),                        ],                      ),                    )),                Positioned(                    left: 10,                    top: -2,                    child: _OptionsMenuButton(                        type: type,                        updateType: () {                          updateType(jobRequirements[index].id ?? 0);                        },                        onRefresh: onRefresh,                        onChangeStatus: () {                          showAppModalBottomSheet(                            title: strings.edit_job_requirements,                            context: context,                            child: AddRequirementsBuilder(                              type: type,                              jobRequirements: jobRequirements[index],                              onRefresh: onRefresh,                            ),                          );                          // onChangeEdit(termsAndConditions[index].id ?? 0);                        },                        onDelete: () {                          onDelete(jobRequirements[index].id ?? 0);                        })),                Padding(                  padding: const EdgeInsets.only(top: 30),                  child: Column(                    children: [                      Text(jobRequirements[index].descriptionAr ?? '', style: kTextRegular.copyWith(color: kBlack_00, fontSize: 12)),                      Text(jobRequirements[index].descriptionEn ?? '', style: kTextRegular.copyWith(color: kGrey_50, fontSize: 12)),                    ],                  ),                ),              ],            ),          );        });  }}class _OptionsMenuButton extends BaseStatelessWidget {  final Function() onRefresh;  final Function() onChangeStatus;  final Function() onDelete;  final Function() updateType;  int type;  _OptionsMenuButton({    Key? key,    required this.onRefresh,    required this.onChangeStatus,    required this.onDelete,    required this.type,    required this.updateType,  }) : super(key: key);  @override  Widget build(BuildContext context) {    TextStyle titleStyle = kTextBold.copyWith(fontSize: 10, color: kGreen_54);    double iconSize = 16;    return OptionsMenuButton(      title: Padding(        padding: const EdgeInsetsDirectional.only(end: 5, top: 15, start: 5, bottom: 40),        child: kLoadSvgInCirclePath(          AppIcons.menu,          height: 6,          width: 6,        ),      ),      options: [        BuildPopupMenuItemContent(          title: strings.edit,          iconPath: AppIcons.editPenOutline,          titleStyle: titleStyle,          iconSize: iconSize,        ),        BuildPopupMenuItemContent(          title: strings.delete,          iconPath: AppIcons.deleteOutline,          titleStyle: titleStyle,          iconSize: iconSize,        ),        // BuildPopupMenuItemContent(        //   title: type == 2 ? strings.update_status_active : strings.update_status_unActive,        //   iconPath: AppIcons.editPenOutline,        //   titleStyle: titleStyle,        //   iconSize: iconSize,        // ),      ],      onSelect: (value) async {        if (value == 0) {          onChangeStatus();        } else if (value == 1) {          onDelete();        }        // else if (value == 2) {        //   updateType();        // }      },    );  }}