import 'package:flutter/cupertino.dart';import 'package:flutter/material.dart';import 'package:shiftapp/presentation/shared/components/base_widget_bloc.dart';import '../../../../../../../presentationUser/common/common_state.dart';import '../../../../../domain/entities/EmpChasifterData.dart';import '../../../bloc/add_new_employees_bloc.dart';import 'add_new_employees_screen.dart';class AddNewEmployeesPage    extends BaseBlocWidget<InitializedAddEmployee, AddNewEmployeesCubit> {    final int freeLancerInfoId;  EmpChasifter? empChasifter;  final Function() ?onPrevious;  AddNewEmployeesPage(      {super.key, this.empChasifter,   this.onPrevious, required this.freeLancerInfoId,  });  @override  void loadInitialData(BuildContext context) {    bloc.fetchDataAdd();    print(empChasifter);    print("jkjkjk");    if (empChasifter != null ) {      bloc.fetchProjectsCompanyId(empChasifter?.companyId ?? 0);      bloc.fetchShiftsByProjects(empChasifter?.projectId ?? 0);      bloc.fetchEmployeeStatuses(empChasifter?.projectId ?? 0);      bloc.fetchPaymentPeriodTypes(empChasifter?.projectId ?? 0);    }  }    @override    bool detectRequiredTasks() {      return false;    }   @override   String? title(BuildContext context) {     // TODO: implement title     return empChasifter==null?null:strings.edit_employee;   }  @override  Widget buildWidget(BuildContext context, InitializedAddEmployee state) {    return AddNewEmployeesScreen(      projectData: state.project,      onPrevious: () => onPrevious!(),      empChasifter: empChasifter,      companies: state.companies,      onFetchProjectsCompanyId: (companyId) =>          bloc.fetchProjectsCompanyId(companyId),      isEdit: (empChasifter == null)?false:true,      addEditEmployee: (addEmployeePrameter) {        bloc.addEmployment(addEmployeePrameter);      },      freeLancerInfoId: freeLancerInfoId,      fetchTimeWork: (id) {        bloc.fetchShiftsByProjects(id);        bloc.fetchEmployeeStatuses(id);        bloc.fetchPaymentPeriodTypes(id);      },      shiftsStream: bloc.shiftsStream,      paymentPeriodTypesStream: bloc.paymentPeriodTypesStream,      employeeStatusesStream: bloc.employeeStatusesStream,      dayRelax: state.days,      projectsStream: bloc.projectsStream,    );  }  @override  void onSuccessDismissed() {    Navigator.pop(context, true);  }}