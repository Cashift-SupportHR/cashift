import 'package:injectable/injectable.dart';import 'package:shiftapp/core/bloc/base_cubit.dart';import '../../../../../adminFeatures/focusPoints/data/models/index.dart';import '../../../../../adminFeatures/projectsManagement/data/models/index.dart';import '../../../../../adminFeatures/usersManagement/data/models/index.dart';import '../../../../../presentationUser/common/common_state.dart';import '../../../../../presentationUser/common/stream_data_state.dart';import '../../../../../shared/models/common_list_item.dart';import '../../../../focusPoints/domain/entities/index.dart';import '../../../../vehicles/data/models/index.dart';import '../../../../vehicles/domain/entities/index.dart';import '../../../data/models/add_vehicle_zone_params.dart';import '../../../data/repositories/vehicles_zone_repository.dart';import '../../../domain/entities/vehicle_zone.dart';import 'add_vehicles_zone_state.dart';@Injectable()class AddVehiclesZoneCubit extends BaseCubit {  final VehiclesZoneRepository _repository;  final ProjectsManagementRepository projectsRepository;  final UsersManagementRepository usersRepository;  final FocusPointsRepository focusPointsRepository;  final VehiclesRepository vehiclesRepository;  AddVehiclesZoneCubit(      this._repository,      this.projectsRepository,      this.usersRepository,      this.focusPointsRepository,      this.vehiclesRepository);  StreamDataStateInitial<List<Vehicle>?> vehiclesStream =      StreamDataStateInitial<List<Vehicle>?>();  StreamDataStateInitial<List<CommonListItem>?> projectsStream =      StreamDataStateInitial<List<CommonListItem>?>();  StreamDataStateInitial<List<ShiftsByProject>?> shiftsStream =      StreamDataStateInitial<List<ShiftsByProject>?>();  void fetchInitialData(VehicleZone? item) async {    executeBuilder(() => projectsRepository.fetchCompanies(),        onSuccess: (companies) async {      if (item != null) {        fetchProjectsCompanyId(item.companyId ?? 0);        fetchVehiclesByProjectId(item.projectId ?? 0);        fetchShiftByProjectId(item.projectId ?? 0);      }      emit(Initialized<AddVehiclesZoneState>(          data: AddVehiclesZoneState(              vehiclesStream: vehiclesStream,              companies: companies,              projectsStream: projectsStream,              initialData: item,              shiftsStream: shiftsStream)));    });  }  Future<void> fetchProjectsCompanyId(int companyId) async {    try {      final data =          await usersRepository.fetchListProjectsByCompanyId(companyId);      projectsStream.setData(data);    } on Exception catch (e) {      projectsStream.setError(e);    }  }  Future<void> fetchVehiclesByProjectId(int projectId) async {    try {      final data = await _repository.fetchVehiclesByProjectId(projectId);      vehiclesStream.setData(data);    } on Exception catch (e) {      vehiclesStream.setError(e);    }  }  void addVehiclesZone(AddVehicleZoneParams params) {    executeEmitterListener(() => _repository.addVehicleZone(params));  }  void editVehiclesZone(AddVehicleZoneParams params) {    executeEmitterListener(() => _repository.editVehicleZone(params));  }  Future<void> fetchShiftByProjectId(int projectId) async {    try {      print('projectIds $projectId');      final response =          await focusPointsRepository.fetchShiftsByProjectId(projectId);      List<ShiftsByProject> shifts =          response.map((e) => ShiftsByProject.fromJson(e)).toList();      shiftsStream.setData(shifts);    } catch (e) {      print('error $e');      shiftsStream.setError(e);    }  }}