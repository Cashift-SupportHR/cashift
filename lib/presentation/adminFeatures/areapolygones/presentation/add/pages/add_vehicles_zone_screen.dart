import '../../../../../adminFeatures/usersManagement/presentation/addNewUser/widgets/company_picker.dart';import '../../../../../shared/components/index.dart';import '../../../../../shared/components/picker/projects_picker_stream.dart';import '../../../../../shared/components/text_field/build_text_field_item.dart';import '../../../../focusPoints/domain/entities/index.dart';import '../../../../vehicles/domain/entities/index.dart';import '../../../data/models/add_vehicle_zone_params.dart';import '../bloc/add_vehicles_zone_state.dart';class AddInfoVehicleZoneScreen extends BaseStatelessWidget {  final AddVehiclesZoneState state;  final Function(int id) onFetchProjectsByCompanyId;  final Function(int id) onFetchVehiclesAndShiftsByProjectId;  final Function(AddVehicleZoneParams) onAddVehiclesZone;  AddInfoVehicleZoneScreen(      {Key? key,      required this.state,      required this.onFetchProjectsByCompanyId,      required this.onFetchVehiclesAndShiftsByProjectId,      required this.onAddVehiclesZone})      : super(key: key);  final _formKey = GlobalKey<FormState>();  int companyId = 0;  int projectId = 0;  int shiftId = 0;  int vehicleId = 0;  TextEditingController projectController = TextEditingController();  TextEditingController shiftController = TextEditingController();  TextEditingController vehicleController = TextEditingController();  TextEditingController areaNameController = TextEditingController();  TextEditingController hoursNumberController = TextEditingController();  TextEditingController minutesNumberController = TextEditingController();  @override  Widget build(BuildContext context) {    _initData();    return Form(      key: _formKey,      child: Column(        children: [          Expanded(            child: SingleChildScrollView(              padding: const EdgeInsets.all(16),              child: Column(                crossAxisAlignment: CrossAxisAlignment.start,                mainAxisAlignment: MainAxisAlignment.start,                children: [                  companiesPicker(),                  projectsPickerStream(),                  shiftsPickerStream(),                  areaNameTextField(context),                  vehiclesPicker(),                  numberHoursTextField(context),                  numberMinutesTextField(context),                ],              ),            ),          ),          rowButtons(context),        ],      ),    );  }  CompanyPicker companiesPicker() {    return CompanyPicker(      items: state.companies ?? [],      initialValue: state.initialData?.companyName,      onSelectItem: (item) {        companyId = item.index;        onFetchProjectsByCompanyId(companyId);        if(companyId == state.initialData?.companyId){          _initData();        } else {          projectController.clear();          shiftController.clear();          vehicleController.clear();        }      },    );  }  ProjectsPickerStream projectsPickerStream() {    return ProjectsPickerStream(      projectsStream: state.projectsStream,      projectController: projectController,      onSelectItem: (id) {        projectId = id;        onFetchVehiclesAndShiftsByProjectId(projectId);        if(projectId == state.initialData?.projectId){          projectController.text = state.initialData?.projectName ?? '';          shiftController.text = state.initialData?.shiftName ?? '';          vehicleController.text = state.initialData?.plateNumber ?? '';        } else {          shiftController.clear();          vehicleController.clear();        }      },    );  }  StreamDataStateWidget<List<ShiftsByProject>?> shiftsPickerStream() {    return StreamDataStateWidget<List<ShiftsByProject>?>(        stream: state.shiftsStream,        builder: (context, data) {          return BuildTextFieldItem(            title: strings.working_period,            hintText: strings.select_working_period,            suffixIcon: Icons.keyboard_arrow_down,            controller: shiftController,            onTap: () {              ListPickerWidget.showPicker(                  context: context,                  title: strings.select_working_period,                  setSearch: true,                  searchHint: strings.search,                  items: ShiftsByProject.toItemsListPicker(data ?? []),                  onSelectItem: (item) async {                    shiftController.text = item.value;                    shiftId = item.index;                  });            },          );        });  }  StreamDataStateWidget<List<Vehicle>?> vehiclesPicker() {    return StreamDataStateWidget<List<Vehicle>?>(        stream: state.vehiclesStream,        builder: (context, data) {          return BottomSheetTextFieldRectangle(            title: strings.vehicles,            hintText: strings.select_vehicles,            controller: vehicleController,            items: data                    ?.map((e) => Item(                          index: e.id ?? 0,                          value: e.plateNumber ?? '',                        ))                    .toList() ??                [],            onSelectItem: (item) {              vehicleId = item.index;              vehicleController.text = item.value;            },          );        });  }  BuildTextFieldItem areaNameTextField(BuildContext context) {    return BuildTextFieldItem(      title: strings.area_name,      hintText: strings.type_area_name,      controller: areaNameController,      keyboardType: TextInputType.text,    );  }  BuildTextFieldItem numberHoursTextField(BuildContext context) {    return BuildTextFieldItem(      title: strings.number_field_survey_hours,      hintText: strings.type_number_hours,      controller: hoursNumberController,    );  }  BuildTextFieldItem numberMinutesTextField(BuildContext context) {    return BuildTextFieldItem(      title: strings.number_minutes,      hintText: strings.type_number_minutes,      controller: minutesNumberController,    );  }  Widget rowButtons(BuildContext context) {    return state.initialData == null ? RowButtons(      onSave: () {        if (_formKey.currentState!.validate()) {          onAddPressed();        }      },      margin: const EdgeInsets.all(16),      onCancel: () {        Navigator.pop(context);      },    ) : AppCupertinoButton(      onPressed: () {        if (_formKey.currentState!.validate()) {          onAddPressed();        }      },      margin: const EdgeInsets.all(16),      text: strings.save_button,    );  }  onAddPressed() {    onAddVehiclesZone(      AddVehicleZoneParams(        id: state.initialData?.id ?? 0,        companyId: companyId,        projectId: projectId,        name: areaNameController.text,        shiftId: shiftId,        vehicleId: vehicleId,        expectedHours: int.parse(hoursNumberController.text),        expectedMinutes: int.parse(minutesNumberController.text),      ),    );  }  _initData() {    if (state.initialData != null) {      companyId = state.initialData?.companyId ?? 0;      projectId = state.initialData?.projectId ?? 0;      shiftId = state.initialData?.shiftId ?? 0;      vehicleId = state.initialData?.vehicleId ?? 0;      print('vehicleId: ${state.initialData?.plateNumber}');      vehicleController.text = state.initialData?.plateNumber ?? '';      print('vehicleId: ${vehicleController.text}');      areaNameController.text = state.initialData?.name ?? '';      projectController.text = state.initialData?.projectName ?? '';      shiftController.text = state.initialData?.shiftName ?? '';      hoursNumberController.text = state.initialData?.expectedHours?.toString() ?? '';      minutesNumberController.text =          state.initialData?.expectedMinutes?.toString() ?? '';    }  }}