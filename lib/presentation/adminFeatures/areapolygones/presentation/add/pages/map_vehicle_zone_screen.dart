import 'package:google_maps_flutter/google_maps_flutter.dart';import 'package:shiftapp/presentation/presentationUser/resources/colors.dart';import 'package:shiftapp/presentation/presentationUser/resources/constants.dart';import 'package:shiftapp/utils/app_icons.dart';import '../../../../../../core/services/routes.dart';import '../../../../../shared/components/index.dart';class MapVehicleZoneScreen extends BaseStatelessWidget {  final Function() onPrevious;  final Function(List<LatLng> polygonPoints) onAddPolygonPoints;  MapVehicleZoneScreen({    Key? key,    required this.onPrevious,    required this.onAddPolygonPoints,  }) : super(key: key);  @override  Widget build(BuildContext context) {    return Column(      children: [        Expanded(          child: SingleChildScrollView(            padding: const EdgeInsets.all(16),            child: Column(              children: [                icon(),                SizedBox(height: 16),                titleText(),                SizedBox(height: 16),                Column(                  crossAxisAlignment: CrossAxisAlignment.start,                  children: [                    titleInstructions(),                    SizedBox(height: 16),                    instructions(),                  ],                ),              ],            ),          ),        ),        rowButtons(context),      ],    );  }  Widget icon() {    return kLoadSvgInCirclePath(AppIcons.mark_box_map, height: 174, width: 174);  }  Widget titleText() {    return Text(      strings.locate_area_map,      style: kTextSemiBold.copyWith(fontSize: 24, color: kGreen_3D),    );  }  Widget titleInstructions() {    return Text(      strings.you_have_to_take_some_points_into_consideration_check_box,      style: kTextRegular.copyWith(fontSize: 14, color: kGray_6D),    );  }  Widget instructions() {    return Text(   strings.search_by_area,      style: kTextRegular.copyWith(fontSize: 14, color: kGray_6D),    );  }  RowButtons rowButtons(BuildContext context) {    return RowButtons(      onSave: () async {        final data = await Navigator.pushNamed(          context,          Routes.drawPolygonWithMarkersPage,        );        if (data != null && data is List<LatLng>) {          onAddPolygonPoints(onAddPolygonPoints(data));        } else {          SnackBarManager.showErrorSnackBar(              context, strings.please_select_area);        }      },      textSaveButton: strings.select_map,      margin: const EdgeInsets.all(16),      onCancel: () {        Navigator.pop(context);      },    );  }}