import 'package:flutter/cupertino.dart';import 'package:flutter/material.dart';import 'package:shiftapp/presentation/shared/components/base_widget_bloc.dart';import '../../../../../../core/services/routes.dart';import '../../../../../presentationUser/common/common_state.dart';import '../bloc/add_punishment_bloc.dart';import 'add_punishment_screen.dart';class AddPunishmentPage    extends BaseBlocWidget<InitializedAddPunishment, AddPunishmentCubit> {  AddPunishmentPage({Key? key}) : super(key: key);  static push(BuildContext context, {required Function() onSuccess, int? id}) async {    final result = await Navigator.pushNamed(context, Routes.addPunishmentPage, arguments: id);    if (result is bool && result) {      onSuccess();    }  }  @override  void loadInitialData(BuildContext context) {    int? id = getArguments(context);    bloc.fetchInitialData(id: id);  }  @override  bool initializeByKoin() {    return false;  }  @override  bool detectRequiredTasks() {    return false;  }  @override  String? title(BuildContext context) {    return getArguments(context) !=null ? strings.edit_punishment : strings.add_new_punishment;  }  @override  Widget buildWidget(BuildContext context, InitializedAddPunishment state) {    return AddPunishmentScreen(      state: state,      onAddPunishment: (params) {        bloc.addEditPunishment(params);      },    );  }  @override  void onSuccessDismissed() {    Navigator.pop(context, true);  }}