import 'package:shiftapp/presentation/presentationUser/resources/colors.dart';import 'package:shiftapp/presentation/presentationUser/resources/constants.dart';import '../../../../../presentationUser/common/common_state.dart';import '../../../../../shared/components/index.dart';import '../../../../../shared/components/text_field/build_text_field_item.dart';import '../../../data/models/add_edit_punishment_params.dart';import '../../../domain/entities/punishments_status.dart';import '../widgets/punishment_name_picker.dart';import '../widgets/punishment_type_picker.dart';class AddPunishmentScreen extends BaseStatelessWidget {  final InitializedAddPunishment state;  final Function(AddEditPunishmentParams) onAddPunishment;  AddPunishmentScreen({    Key? key,    required this.state,    required this.onAddPunishment,  }) : super(key: key);  TextEditingController discountedAmountController = TextEditingController();  TextEditingController prohibitedDaysController = TextEditingController();  StreamState<String> descriptionStream = StreamStateInitial();  StreamState<int> punishmentNameStream = StreamStateInitial<int>();  final _formKey = GlobalKey<FormState>();  int punishmentNameId = 0;  int punishmentTypeId = 0;  @override  Widget build(BuildContext context) {    _initialValues();    return Scaffold(      bottomNavigationBar: RowButtons(        onSave: () => onAddPunishmentPressed(),        onCancel: () => Navigator.pop(context),      ),      body: SingleChildScrollView(        padding: const EdgeInsets.all(16),        child: Form(          key: _formKey,          child: Column(            children: [              PunishmentNamePicker(                initialValue: state.addEditPunishmentParams?.typesOfViolationName,                items: state.punishmentsNames,                onSelectItem: (item) {                  punishmentNameId = item.index;                  punishmentNameStream.setData(punishmentNameId);                },              ),              PunishmentTypePicker(                initialValue: state.addEditPunishmentParams?.violationTypeName,                items: state.punishmentsTypes,                onSelectItem: (item) {                  punishmentTypeId = item.index;                },              ),              textFieldStream(),            ],          ),        ),      ),    );  }  textFieldStream() {    return StreamBuilder<int>(        initialData: PunishmentsStatus.permanentBan,        stream: punishmentNameStream.stream,        builder: (context, snapshot) {          print('snapshot.data: ${snapshot.data}');          return (snapshot.data == null ||                  snapshot.data == PunishmentsStatus.permanentBan)              ? const SizedBox.shrink()              : snapshot.data == PunishmentsStatus.temporaryDiscount                  ? BuildTextFieldItem(                      title: strings.num_prohibited_days,                      hintText: strings.determine_prohibited_days,                      controller: prohibitedDaysController,                    )                  : BuildTextFieldItem(                      title: strings.value_discounted_amount,                      hintText: '00',                      suffixWidget: text(),                      controller: discountedAmountController,                    );        });  }  Widget text() {    return Padding(      padding: const EdgeInsetsDirectional.only(top: 16, end: 5),      child: Text(        strings.saudi_riyals,        style: kTextMedium.copyWith(color: kGreen_7C, fontSize: 12),        textAlign: TextAlign.center,      ),    );  }  _initialValues() {    AddEditPunishmentParams? params = state.addEditPunishmentParams;    if(params == null) return;    punishmentNameId = params.typesOfViolation ?? 0;    punishmentTypeId = params.violationTypeId ?? 0;    discountedAmountController.text = params.amountViolation?.toString() ?? '';    prohibitedDaysController.text = params.totalViolationDays?.toString() ?? '';    punishmentNameStream.setData(punishmentNameId);  }  onAddPunishmentPressed() {    if (_formKey.currentState!.validate()) {      onAddPunishment(AddEditPunishmentParams(        id: state.addEditPunishmentParams?.id ?? 0,        typesOfViolation: punishmentNameId,        violationTypeId: punishmentTypeId,        amountViolation: double.parse(discountedAmountController.text.isNotEmpty ?        discountedAmountController.text : '0.0'),        totalViolationDays: int.parse(prohibitedDaysController.text.isNotEmpty ?        prohibitedDaysController.text : '0'),      ));    }  }}