import 'package:injectable/injectable.dart';import 'package:shiftapp/core/bloc/base_cubit.dart';import 'package:shiftapp/data/exceptions/empty_list_exception.dart';import 'package:shiftapp/presentation/adminFeatures/shared/data/repositories/today_opportunity_repository.dart';import '../../../../presentationUser/common/common_state.dart';import '../../../addOpportunity/domain/entities/opportunity_applicant.dart';import '../../../employmentManagement/data/models/add_block_employee_params.dart';import '../../../employmentManagement/data/repositories/employment_management_repository.dart';import '../../../shared/domain/entities/opportunities/index.dart';import 'applied_details_state.dart';@injectableclass AppliedDetailsCubit extends BaseCubit {  final TodayOpportunityRepository repository;  final EmploymentManagementRepository employmentManagementRepository;  AppliedDetailsCubit(this.repository, this.employmentManagementRepository);  StreamStateInitial<OpportunityApplicant?> appliedDataStream =      StreamStateInitial();  OpportunityApplicant opportunityApplicant = OpportunityApplicant();  fetchInitialData({    required int id,    required int tab,  }) async {    executeBuilder(() => repository.fetchApplicants(id: id, tab: tab),        onSuccess: (result) async {      opportunityApplicant = result;      emit(Initialized<OpportunityApplicant>(data: result));    });  }  //  // fetchApplicants({  //   required int id,  //   required int tab,  // }) async {  //   executeBuilder(() => repository.fetchApplicants(id: id, tab: tab),  //       onSuccess: (result) {  //     final data = result.freeLanceApplys;  //     emit(Initialized<List<AppliedData>>(data: data ?? []));  //   });  // }  void addBlockEmployee(AddBlockEmployeeParams params) {    executeEmitterListener(        () => employmentManagementRepository.addBlockEmployee(params));  }  fetchApplicantsDetails({    required int id,  }) async {    executeBuilder(        () => repository.fetchApplicantsDetails(              id: id,            ), onSuccess: (result) {      final data = ApplicantsDetails.fromDto(result);      emit(Initialized<ApplicantsDetails>(data: data));    });  }  void searchByText(String value) {    try {      List<AppliedData> usersSearched =          opportunityApplicant.freeLanceApplys ?? [];      if (value.isNotEmpty) {        usersSearched = opportunityApplicant.freeLanceApplys                ?.where((user) =>                    (user.idNumber != null &&                        user.idNumber!.toString().contains(value)) ||                    (user.phoneNumber != null &&                        user.phoneNumber!.contains(value)) ||                    (user.employeeName != null &&                        user.employeeName!.contains(value)))                .toList() ??            [];        if (usersSearched.isEmpty) {          emit(ErrorState(EmptyListException()));          return;        }      } else {        usersSearched = opportunityApplicant.freeLanceApplys ?? [];      }      print('usersSearched: $usersSearched');      OpportunityApplicant newOpportunityApplicant = OpportunityApplicant(          freeLanceApplys: usersSearched,          navItems: opportunityApplicant.navItems);      emit(Initialized<OpportunityApplicant>(data: newOpportunityApplicant));      // appliedDataStream.setData(usersSearched);    } on Exception catch (e) {      print(e);      emit(ErrorState(e));    }  }//// fetchApplicantsStram({//   required int id,//   required int tab,// }) async {//   appliedDataStream.setData(null);//   try {//     final result = await repository.fetchApplicants(id: id, tab: tab),//         listApplied = result.freeLanceApplys ?? [];//     appliedDataStream.setData(listApplied);//   } on Exception catch (e) {//     appliedDataStream.setError(e);//   }// }}