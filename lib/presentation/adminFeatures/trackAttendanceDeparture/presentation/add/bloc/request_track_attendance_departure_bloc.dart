import 'package:injectable/injectable.dart';import 'package:shiftapp/core/bloc/base_cubit.dart';import '../../../../../presentationUser/common/stream_data_state.dart';import '../../../../usersManagement/data/models/index.dart';import '../../../../usersManagement/data/models/user_by_phone_dto.dart';import '../../../data/models/request_track_attendance_departure_params.dart';import '../../../data/repositories/track_attendance_departure_repository.dart';@Injectable()class RequestTrackAttendanceDepartureCubit extends BaseCubit {  final TrackAttendanceDepartureRepository _repository;  final UsersManagementRepository _usersManagementRepository;  RequestTrackAttendanceDepartureCubit(this._repository, this._usersManagementRepository);  StreamDataStateInitial<UserByPhoneDto?> userByPhoneStream =  StreamDataStateInitial();  Future<void> fetchEmpByPhone(String phoneOrIdNumber) async {    try {      final projects = await _usersManagementRepository.fetchUserByPhone(phoneOrIdNumber);      userByPhoneStream.setData(projects);    } catch (e) {      userByPhoneStream.setError(e);    }  }  void createUpdateRequestTrackAttendanceDeparture(RequestTrackAttendanceDepartureParams params) {    executeEmitterListener(() => params.id != null && params.id != 0 ? _repository.updateTrackAttendanceDeparture(params) : _repository.createRequestTrackAttendanceDeparture(params));  }}