import 'package:shiftapp/domain/entities/shared/date_formatter.dart';import 'package:shiftapp/presentation/shared/components/index.dart';import 'package:shiftapp/utils/app_icons.dart';import '../../../../../presentationUser/common/stream_data_state.dart';import '../../../../../presentationUser/resources/colors.dart';import '../../../../../presentationUser/resources/constants.dart';import '../../../../../shared/components/text_field/build_text_field_item.dart';import '../../../../usersManagement/data/models/user_by_phone_dto.dart';import '../../../data/models/request_track_attendance_departure_params.dart';import '../../../domain/entities/index.dart';class RequestTrackAttendanceDepartureScreen extends BaseStatelessWidget {  final TrackAttendanceDeparture? initialData;  final StreamDataStateInitial<UserByPhoneDto?> userByPhoneStream;  final Function(String) onSearchEmployee;  final Function(RequestTrackAttendanceDepartureParams) onAdd;  RequestTrackAttendanceDepartureScreen(      {Key? key, this.initialData, required this.userByPhoneStream,required this.onSearchEmployee, required this.onAdd})      : super(key: key);  final _formKey = GlobalKey<FormState>();  TextEditingController fromController = TextEditingController();  TextEditingController toController = TextEditingController();  TextEditingController mobileController = TextEditingController();  int freelancerId = 0;  @override  Widget build(BuildContext context) {    initData();    return Form(      key: _formKey,      child: Column(        children: [          Expanded(            child: SingleChildScrollView(              padding: const EdgeInsets.all(16),              child: Column(                children: [                  icon(),                  SizedBox(height: 16),                  searchEmployee(),                  SizedBox(height: 16),                  dates(),                ],              ),            ),          ),          rowButtons(context),        ],      ),    );  }  Widget icon() {    return kLoadSvgInCirclePath(AppIcons.track_attendance_departure);  }  Row dates() {    return Row(      children: [        dateTextFieldPickerExpanded(          strings.period_from,          fromController,        ),        SizedBox(width: 12),        dateTextFieldPickerExpanded(          strings.period_to,          toController,        ),      ],    );  }  Column searchEmployee(){    return Column(        children: [          BuildTextFieldItem(            controller: mobileController,            title: strings.mobile_number,            hintText: strings.phone,            keyboardType: TextInputType.phone,            suffixIcon: Icons.search,            onChanged: (value) {              freelancerId = 0;              onSearchEmployee(value);            },          ),          StreamDataStateWidget <UserByPhoneDto?>(          stream: userByPhoneStream,          builder: (context, data) {            freelancerId = data?.id ?? 0;            return  Container(              padding: const EdgeInsets.all(16),              decoration: Decorations.boxDecorationBorder(),              child: Column(                crossAxisAlignment: CrossAxisAlignment.start,                children: [                  Text(                    strings.chashifter_data,                    style: kTextBold.copyWith(fontSize: 14, color: kPrimary),                  ),                  SizedBox(height: 10),                  TextValue(                    text: strings.name + ':',                    value: data?.name ?? '',                    valueStyle: kTextMedium.copyWith(fontSize: 14),                  ),                  SizedBox(height: 8),                  TextValue(                    text: strings.mobile_number + ':',                    value: data?.phoneNumber ?? '',                    valueStyle: kTextMedium.copyWith(fontSize: 14),                  ),                ],              ),            );          }),        ],      );  }  Expanded dateTextFieldPickerExpanded(      String title, TextEditingController controller) {    return Expanded(        child: DateTextFieldPicker(      title: title,      controller: controller,          pattern: DateFormatter.DAY_MONTH_YEAR,    ));  }  rowButtons(BuildContext context) {    return RowButtons(      margin: const EdgeInsets.all(16),      onSave: () {        if (_formKey.currentState!.validate()) {          onAddComplaintPressed();        }      },      onCancel: () {        Navigator.pop(context);      },    );  }  onAddComplaintPressed() {    onAdd(RequestTrackAttendanceDepartureParams(      id: initialData?.id ?? 0,      endDate: DateFormatter.formatTimeStamp(          toController.text),      startDate: DateFormatter.formatTimeStamp(          fromController.text),      freelancerId: freelancerId,    ));  }  void initData() {    if (initialData != null) {      mobileController.text = initialData?.freelancerPhone ?? '';      fromController.text = formatDate(initialData?.startDate ?? '');    toController.text = formatDate(initialData?.endDate ?? '');    }  }  String formatDate(String date) => DateFormatter.repairApiDateTime(date, apiPattern: DateFormatter.DATE_TIME_API, pattern: DateFormatter.DAY_MONTH_YEAR, local: 'en',);}