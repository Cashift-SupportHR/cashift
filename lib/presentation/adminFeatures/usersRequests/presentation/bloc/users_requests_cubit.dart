import 'package:injectable/injectable.dart';import 'package:shiftapp/core/bloc/base_cubit.dart';import 'package:shiftapp/presentation/presentationUser/common/stream_data_state.dart';import '../../data/models/reject_user_request_params.dart';import '../../data/models/user_request_terms_params.dart';import '../../data/repositories/users_requests_repository.dart';import '../../domain/entities/user_request.dart';@Injectable()class UsersRequestsCubit extends BaseCubit {  final UsersRequestsRepository _repository;  UsersRequestsCubit(    this._repository,  );  StreamDataStateInitial<List<UserRequest>> usersRequestStream =      StreamDataStateInitial();  void fetchUsersRequestTabs() async {    executeEmitterData(() => _repository.fetchUsersRequestTabs(),        onSuccess: (data) {      fetchUsersRequests(data.first.id!);    });  }  void fetchUsersRequests(int statusId) async {    try {      usersRequestStream.start();      final data = await _repository.fetchUsersRequests(statusId);      usersRequestStream.setData(data);    } catch (e) {      usersRequestStream.setError(e);    }  }  void fetchUserRequestTerms(UserRequestTermsParams params) async {    executeEmitterData(() => _repository.fetchUserRequestTerms(params));  }  void acceptRejectUserRequest(RejectUserRequestParams params) async {    executeEmitterListener(() => _repository.acceptRejectUserRequest(params));  }}