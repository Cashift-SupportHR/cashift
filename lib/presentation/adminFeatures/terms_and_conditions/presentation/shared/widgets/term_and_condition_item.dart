import 'package:flutter/cupertino.dart';import 'package:flutter_svg/flutter_svg.dart';import 'package:shiftapp/presentation/presentationUser/resources/colors.dart';import 'package:shiftapp/presentation/presentationUser/resources/constants.dart';import '../../../../../../utils/app_icons.dart';import '../../../../../shared/components/base_stateless_widget.dart';import '../../../../../shared/components/decorations/decorations.dart';import '../../../../../shared/components/image_builder.dart';import '../../../../../shared/components/options_menu_button.dart';import '../../../../available_opportunities/presentation/widgets/build_popup_menu_button.dart';import '../../../domain/entities/TermandCondition.dart';class TermsAndConditionsItem extends BaseStatelessWidget {  final TermandCondition termsAndConditions;  final int type;  final Function(TermandCondition) onEdit;  final Function(int id) onDelete;  Function(int id) updateType;  TermsAndConditionsItem({    required this.termsAndConditions,    required this.onEdit,    required this.onDelete,    required this.type,    required this.updateType,  });  @override  Widget build(BuildContext context) {    return Container(      margin: EdgeInsets.only(bottom: 10, left: 16, right: 16),      padding: EdgeInsets.only(bottom: 10, left: 10, right: 10),      decoration: Decorations.shapeDecoration(radius: 15),      child: Stack(        children: [          Container(),          Positioned(              right: 10,              top: -1,              child: Padding(                padding: const EdgeInsets.only(bottom: 20),                child: Stack(                  alignment: Alignment.center,                  children: [                    SvgPicture.asset(AppIcons.marker, height: 30, width: 20),                    Padding(                      padding: const EdgeInsets.only(bottom: 5),                      child: Text(                        termsAndConditions.id?.toString() ?? '',                        style: kTextRegular.copyWith(color: kWhite, fontSize: 10),                      ),                    ),                  ],                ),              )),          Positioned(              left: 10,              top: -1,              child: _OptionsMenuButton(                  type: type,                  updateType: () {                    updateType(termsAndConditions.id ?? 0);                  },                  onEdit: () {                    onEdit(termsAndConditions);                  },                  onDelete: () {                    onDelete(termsAndConditions.id ?? 0);                  })),          Padding(            padding: const EdgeInsets.only(top: 40, left: 10, right: 10),            child: Column(              children: [                Text(termsAndConditions.conditionAr ?? '', style: kTextRegular.copyWith(color: kBlack_00, fontSize: 12)),                SizedBox(                  height: 5,                ),                Text(                  termsAndConditions.conditionEn ?? '',                  style: kTextRegular.copyWith(                    color: kGrey_50,                    fontSize: 12,                  ),                  textDirection: TextDirection.ltr,                  textAlign: TextAlign.left,                ),              ],            ),          ),        ],      ),    );  }}class _OptionsMenuButton extends BaseStatelessWidget {  final Function() onEdit;  final Function() onDelete;  final Function() updateType;  int type;  _OptionsMenuButton({    Key? key,    required this.onEdit,    required this.onDelete,    required this.type,    required this.updateType,  }) : super(key: key);  @override  Widget build(BuildContext context) {    TextStyle titleStyle = kTextBold.copyWith(fontSize: 10, color: kGreen_54);    double iconSize = 16;    return OptionsMenuButton(      title: Padding(        padding: const EdgeInsetsDirectional.only(end: 5, top: 15, start: 5, bottom: 10),        child: kLoadSvgInCirclePath(          AppIcons.menu,          height: 6,          width: 6,        ),      ),      options: [        BuildPopupMenuItemContent(          title: strings.edit,          iconPath: AppIcons.editPenOutline,          titleStyle: titleStyle,          iconSize: iconSize,        ),        BuildPopupMenuItemContent(          title: type == 2 ? strings.update_status_active : strings.update_status_unActive,          iconPath: AppIcons.statusChange,          titleStyle: titleStyle,          iconSize: iconSize,        ),        BuildPopupMenuItemContent(          title: strings.delete,          iconPath: AppIcons.deleteOutline,          titleStyle: titleStyle,          iconSize: iconSize,          isDivider: false,        ),      ],      onSelect: (value) async {        if (value == 0) {          onEdit();        } else if (value == 1) {          updateType();        } else if (value == 2) {          onDelete();        }      },    );  }}