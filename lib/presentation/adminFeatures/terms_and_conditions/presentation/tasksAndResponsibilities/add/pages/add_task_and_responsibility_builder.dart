import 'package:shiftapp/presentation/adminFeatures/usersManagement/domain/entities/company.dart';import 'package:shiftapp/presentation/presentationUser/common/common_state.dart';import 'package:shiftapp/presentation/shared/components/base_widget_bloc.dart';import 'package:shiftapp/presentation/shared/components/stepper/easy_step.dart';import '../../../../data/models/terms_and_conditions_prams.dart';import '../../../../domain/entities/TermandCondition.dart';import '../bloc/add_task_and_responsibility_cubit.dart';import '../widgets/add_task_and_responsibility_sheet_widget.dart';class AddTaskAndResponsibilityBuilder extends BaseBlocWidget<Initialized<List<Company>>, AddTaskAndResponsibilityCubit> {  final Function() onRefresh;  final TermandCondition? termandCondition;  AddTaskAndResponsibilityBuilder({required this.onRefresh, required this.termandCondition});  @override  bool detectRequiredTasks() {    return false;  }  @override  void loadInitialData(BuildContext context) {    bloc.fetchCompany();  }  @override  Widget buildWidget(BuildContext context, Initialized<List<Company>> state) {    return AddTaskAndResponsibilityWidget(      company: state.data,      termandCondition: termandCondition,      projectsStream: bloc.projectsStream,      onFetchProjectsByCompanyId: (id) {        bloc.fetchProjectsCompanyId(id);      },      onAdd: (TermsAndConditionsPrams termsAndConditionsPrams) {        bloc.addEditTask(termsAndConditionsPrams: termsAndConditionsPrams);      },    );  }  @override  void onSuccessDismissed() {    onRefresh();    Navigator.of(context).pop();  }}