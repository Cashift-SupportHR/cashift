import 'package:injectable/injectable.dart';import 'package:shiftapp/core/bloc/base_cubit.dart';import 'package:shiftapp/presentation/adminFeatures/usersManagement/domain/entities/company.dart';import '../../../../../../presentationUser/common/common_state.dart';import '../../../../../../presentationUser/common/stream_data_state.dart';import '../../../../../../shared/models/common_list_item.dart';import '../../../../../projectsManagement/data/models/index.dart';import '../../../../../usersManagement/data/models/index.dart';import '../../../../data/models/index.dart';@Injectable()class AddTaskAndResponsibilityCubit extends BaseCubit {  final TermandConditionRepository _repository;  final ProjectsManagementRepository projectsManagementRepository;  final UsersManagementRepository usersRepository;  AddTaskAndResponsibilityCubit(this._repository, this.projectsManagementRepository, this.usersRepository);  StreamDataStateInitial<List<CommonListItem>?> projectsStream = StreamDataStateInitial<List<CommonListItem>?>();  fetchCompany() async {    executeBuilder(() => projectsManagementRepository.fetchCompanies(), onSuccess: (companies) {      emit(Initialized<List<Company>>(data: companies));    });  }  Future<void> fetchProjectsCompanyId(int companyId) async {    try {      final data = await usersRepository.fetchListProjectsByCompanyId(companyId);      projectsStream.setData(data);    } on Exception catch (e) {      projectsStream.setError(e);    }  }  addEditTask({required TermsAndConditionsPrams termsAndConditionsPrams}) async {    try {      emit(LoadingStateListener());      final message = await _repository.addEditTask(termsAndConditionsPrams);      emit(SuccessStateListener(data: message));    } catch (e) {      emit(FailureStateListener(e));    }  }}