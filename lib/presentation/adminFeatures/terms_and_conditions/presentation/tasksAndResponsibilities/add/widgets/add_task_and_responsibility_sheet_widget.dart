import 'package:flutter/material.dart';import 'package:shiftapp/extensions/extensions.dart';import 'package:shiftapp/presentation/adminFeatures/usersManagement/domain/entities/company.dart';import '../../../../../../presentationUser/common/stream_data_state.dart';import '../../../../../../presentationUser/resources/validation.dart';import '../../../../../../shared/components/index.dart';import '../../../../../../shared/components/picker/projects_picker_stream.dart';import '../../../../../../shared/components/text_field/build_text_field_item.dart';import '../../../../../../shared/models/common_list_item.dart';import '../../../../../projectsManagement/presentation/addNewProject/pages/addProject/widgets/company_picker.dart';import '../../../../data/models/index.dart';import '../../../../domain/entities/TermandCondition.dart';class AddTaskAndResponsibilityWidget extends BaseStatelessWidget {  final List<Company> company;  final TermandCondition? termandCondition;  final StreamDataStateInitial<List<CommonListItem>?> projectsStream;  final Function(int id) onFetchProjectsByCompanyId;  final Function(TermsAndConditionsPrams prams) onAdd;  AddTaskAndResponsibilityWidget({required this.onAdd, required this.termandCondition, required this.onFetchProjectsByCompanyId, required this.company, required this.projectsStream});  TextEditingController conditionArController = TextEditingController();  TextEditingController conditionEnController = TextEditingController();  final _formKey = GlobalKey<FormState>();  int? id;  int? companyId;  int? projectId;  @override  Widget build(BuildContext context) {    conditionArController = TextEditingController(text: termandCondition?.conditionAr ?? '');    conditionEnController = TextEditingController(text: termandCondition?.conditionEn ?? '');    id = termandCondition?.id ?? 0;    companyId = termandCondition?.companyId ?? 0;    return Form(      key: _formKey,      child: Scaffold(        bottomNavigationBar: Padding(          padding: const EdgeInsets.only(bottom: 10),          child: AppCupertinoButton(            text: strings.save_button,            radius: BorderRadius.circular(8),            onPressed: () async {              if (_formKey.currentState!.validate()) {                return onAdd(TermsAndConditionsPrams(id: id, conditionAr: conditionArController.text, conditionEn: conditionEnController.text, companyId: companyId));              }            },          ),        ),        body: SingleChildScrollView(          child: Column(            children: [              CompanyProjectPicker(                label: strings.company_name,                hintText: strings.select_company_name,                initialValue: termandCondition?.companyName ?? "",                items: company,                onSelectItem: (item) {                  companyId = item.index;                  projectId = null;                  if (item.index != 0) onFetchProjectsByCompanyId(item.index);                },              ),              ProjectsPickerStream(                projectsStream: projectsStream,                projectController: TextEditingController(),                onSelectItem: (id) {                  projectId = id;                },              ),              BuildTextFieldItem(                title: strings.condition_ar,                controller: conditionArController,                keyboardType: TextInputType.text,                hintText: strings.condition_ar_validation,                validator: (value) => validateArabicText(value ?? ''),                minLines: 3,              ),              BuildTextFieldItem(                title: strings.condition_en,                keyboardType: TextInputType.text,                controller: conditionEnController,                hintText: strings.condition_en_validation,                validator: (value) => validateEnglishText(value ?? ''),                minLines: 3,              ),            ],          ),        ),      ),    );  }  validateArabicText(String value) {    if (value.isNullOrEmpty()) {      return strings.this_field_is_required;    } else if (!Validation.isArabicLettersWithNumbers(value)) {      return strings.must_be_arabic_letters;    }    return null;  }  validateEnglishText(String value) {    if (value.isNullOrEmpty()) {      return strings.this_field_is_required;    } else if (!Validation.isEnglishLettersWithNumbers(value)) {      return strings.must_be_english_letters;    }    return null;  }}