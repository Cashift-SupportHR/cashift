import 'package:injectable/injectable.dart';import 'package:shiftapp/core/bloc/base_cubit.dart';import 'package:shiftapp/presentation/adminFeatures/gasStations/data/models/add_edit_gas_station_prams.dart';import '../../../../../../presentationUser/common/common_state.dart';import '../../../../../shared/domain/usecases/companies_usecase.dart';import '../../../../../shared/domain/usecases/projects_usecase.dart';import '../../../../data/repositories/gas_stations_repository.dart';@Injectable()class AddGasStationsCubit extends BaseCubit {  final GasStationsRepository _repository;  final ProjectsUseCase projectsUseCase;  final CompaniesUseCase companiesUseCase;  AddGasStationsCubit(    this._repository,    this.projectsUseCase,    this.companiesUseCase,  );  void addEditGasStation(      AddEditGasStationPrams params) {    executeEmitterListener(() => _repository.addEditGasStation(params)); //  }  Future<void> fetchData() async {    emit(LoadingState());    try {      final project = await projectsUseCase.call();      final company = await companiesUseCase.call();      emit(InitializedGasStations(project: project, companies: company));    } on Exception catch (e) {      emit(ErrorState(e));    }  }}