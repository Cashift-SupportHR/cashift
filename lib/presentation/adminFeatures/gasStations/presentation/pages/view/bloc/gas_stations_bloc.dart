import 'package:injectable/injectable.dart';import 'package:shiftapp/core/bloc/base_cubit.dart';import '../../../../../../presentationUser/common/common_state.dart';import '../../../../data/repositories/gas_stations_repository.dart';import '../../../../domain/entities/GasStation.dart';@Injectable()class GasStationsCubit extends BaseCubit {  final GasStationsRepository _repository;  GasStationsCubit(    this._repository,  );  StreamStateInitial<List<GasStation>?> gasStationStream = StreamStateInitial();  List<GasStation> listGasStation = [];  fetchInitialData() async {    executeBuilder(() => _repository.fetchGasStation(), onSuccess: (result) {      listGasStation = result;      emit(Initialized<List<GasStation>>(data: listGasStation));    });  }  void searchByText(String value) {    try {      List<GasStation> usersSearched = listGasStation;      if (value.isNotEmpty) {        usersSearched = listGasStation            .where((user) =>                (user.id != null && user.id!.toString().contains(value)) ||                (user.stationNameEn != null &&                    user.stationNameEn!.contains(value)) ||                (user.companyName != null &&                    user.companyName!.contains(value)) ||                (user.projectName != null &&                    user.projectName!.contains(value)) ||                (user.stationNameAr != null &&                    user.stationNameAr!.contains(value)))            .toList();      }      gasStationStream.setData(usersSearched);    } on Exception catch (e) {      print(e);      gasStationStream.setError(e);    }  }  fetchGasStation() async {    gasStationStream.setData(null);    try {      final result = await _repository.fetchGasStation();      listGasStation = result;      gasStationStream.setData(listGasStation);    } on Exception catch (e) {      gasStationStream.setError(e);    }  }  deleteGasStation({    required int id,  }) async {    executeEmitterListener(() => _repository.deleteGasStation(id));  }}